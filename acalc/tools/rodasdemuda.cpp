/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__rodasdemuda
#define __PYX_HAVE_API__rodasdemuda
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "rodasdemuda.pyx",
  "stringsource",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'rodasdemuda' */
static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "rodasdemuda"
int __pyx_module_is_main_rodasdemuda = 0;

/* Implementation of 'rodasdemuda' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_sorted;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_m[] = "_m";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_zO[] = "_zO";
static const char __pyx_k_MAX[] = "MAX";
static const char __pyx_k_MIN[] = "MIN";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_err[] = "err";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_w_2[] = "_w";
static const char __pyx_k_P251[] = "P251";
static const char __pyx_k_P630[] = "P630";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_date[] = "__date__";
static const char __pyx_k_erro[] = "erro";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_modo[] = "modo";
static const char __pyx_k_name[] = "_name";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_250x5[] = "250x5";
static const char __pyx_k_MAX_A[] = "MAX_A";
static const char __pyx_k_MAX_B[] = "MAX_B";
static const char __pyx_k_MAX_C[] = "MAX_C";
static const char __pyx_k_MAX_D[] = "MAX_D";
static const char __pyx_k_MAX_F[] = "MAX_F";
static const char __pyx_k_MAX_T[] = "MAX_T";
static const char __pyx_k_MIN_T[] = "MIN_T";
static const char __pyx_k_Modul[] = "Modul";
static const char __pyx_k_P2300[] = "P2300";
static const char __pyx_k_giter[] = "giter";
static const char __pyx_k_razao[] = "_razao";
static const char __pyx_k_rodas[] = "rodas";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_MAX_AB[] = "MAX_AB";
static const char __pyx_k_MAX_CD[] = "MAX_CD";
static const char __pyx_k_MAX_EF[] = "MAX_EF";
static const char __pyx_k_MIN_AB[] = "MIN_AB";
static const char __pyx_k_MIN_CD[] = "MIN_CD";
static const char __pyx_k_MIN_EF[] = "MIN_EF";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_beta_2[] = "_beta";
static const char __pyx_k_common[] = "common";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_lrodas[] = "lrodas";
static const char __pyx_k_modelo[] = "_modelo";
static const char __pyx_k_modo_2[] = "_modo";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_modulo[] = "modulo";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_razaom[] = "razaom";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_DIREITA[] = "DIREITA";
static const char __pyx_k_Heckert[] = "Heckert";
static const char __pyx_k_LINDNER[] = "LINDNER";
static const char __pyx_k_Lindner[] = "Lindner";
static const char __pyx_k_Rollete[] = "Rollete";
static const char __pyx_k_contact[] = "__contact__";
static const char __pyx_k_degrees[] = "degrees";
static const char __pyx_k_groupby[] = "groupby";
static const char __pyx_k_keyfunc[] = "keyfunc";
static const char __pyx_k_limites[] = "limites";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_radians[] = "radians";
static const char __pyx_k_rollete[] = "rollete";
static const char __pyx_k_sentido[] = "sentido";
static const char __pyx_k_six2dec[] = "six2dec";
static const char __pyx_k_ESQUERDA[] = "ESQUERDA";
static const char __pyx_k_MIN_T_AB[] = "MIN_T_AB";
static const char __pyx_k_MIN_T_CD[] = "MIN_T_CD";
static const char __pyx_k_NAVALHAO[] = "NAVALHAO";
static const char __pyx_k_conjunto[] = "conjunto";
static const char __pyx_k_entradas[] = "entradas";
static const char __pyx_k_operator[] = "operator";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_Reishauer[] = "Reishauer";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_reishauer[] = "reishauer";
static const char __pyx_k_sentido_2[] = "_sentido";
static const char __pyx_k_Pfauter251[] = "Pfauter251";
static const char __pyx_k_Pfauter630[] = "Pfauter630";
static const char __pyx_k_Spiromatic[] = "Spiromatic";
static const char __pyx_k_TANGENCIAL[] = "TANGENCIAL";
static const char __pyx_k_conj_rodas[] = "_conj_rodas";
static const char __pyx_k_itemgetter[] = "itemgetter";
static const char __pyx_k_pfauter251[] = "pfauter251";
static const char __pyx_k_pfauter630[] = "pfauter630";
static const char __pyx_k_DIFERENCIAL[] = "DIFERENCIAL";
static const char __pyx_k_pfauter2300[] = "pfauter2300";
static const char __pyx_k_rodasdemuda[] = "rodasdemuda";
static const char __pyx_k_Modul___init[] = "Modul.__init__";
static const char __pyx_k_rodasdemuda6[] = "rodasdemuda6";
static const char __pyx_k_31_March_2013[] = "31 March 2013";
static const char __pyx_k_Modul_limites[] = "Modul.limites";
static const char __pyx_k_Heckert___init[] = "Heckert.__init__";
static const char __pyx_k_Lindner___init[] = "Lindner.__init__";
static const char __pyx_k_Rollete___init[] = "Rollete.__init__";
static const char __pyx_k_Daniel_Oliveira[] = "Daniel Oliveira";
static const char __pyx_k_Heckert_limites[] = "Heckert.limites";
static const char __pyx_k_Lindner_limites[] = "Lindner.limites";
static const char __pyx_k_Rollete_limites[] = "Rollete.limites";
static const char __pyx_k_Heckert_ZFWG_250[] = "Heckert ZFWG 250";
static const char __pyx_k_Reishauer___init[] = "Reishauer.__init__";
static const char __pyx_k_Runderland_5A_4C[] = "Runderland 5A-4C";
static const char __pyx_k_Modul_rodasdemuda[] = "Modul.rodasdemuda";
static const char __pyx_k_Pfauter251___init[] = "Pfauter251.__init__";
static const char __pyx_k_Pfauter630___init[] = "Pfauter630.__init__";
static const char __pyx_k_ReishauerDressage[] = "ReishauerDressage";
static const char __pyx_k_Reishauer_limites[] = "Reishauer.limites";
static const char __pyx_k_Spiromatic___init[] = "Spiromatic.__init__";
static const char __pyx_k_Pfauter251_limites[] = "Pfauter251.limites";
static const char __pyx_k_Pfauter630_limites[] = "Pfauter630.limites";
static const char __pyx_k_Spiromatic_limites[] = "Spiromatic.limites";
static const char __pyx_k_reishauer_dressage[] = "reishauer_dressage";
static const char __pyx_k_Heckert_rodasdemuda[] = "Heckert.rodasdemuda";
static const char __pyx_k_Lindner_rodasdemuda[] = "Lindner.rodasdemuda";
static const char __pyx_k_Rollete_rodasdemuda[] = "Rollete.rodasdemuda";
static const char __pyx_k_Reishauer_rodasdemuda[] = "Reishauer.rodasdemuda";
static const char __pyx_k_Pfauter251_rodasdemuda[] = "Pfauter251.rodasdemuda";
static const char __pyx_k_Pfauter630_rodasdemuda[] = "Pfauter630.rodasdemuda";
static const char __pyx_k_Spiromatic_rodasdemuda[] = "Spiromatic.rodasdemuda";
static const char __pyx_k_Spiromatic_rodasdemuda6[] = "Spiromatic.rodasdemuda6";
static const char __pyx_k_ReishauerDressage___init[] = "ReishauerDressage.__init__";
static const char __pyx_k_ReishauerDressage_limites[] = "ReishauerDressage.limites";
static const char __pyx_k_danielfilipe_mo_gmail_com[] = "danielfilipe.mo@gmail.com";
static const char __pyx_k_ReishauerDressage_rodasdemuda[] = "ReishauerDressage.rodasdemuda";
static const char __pyx_k_Modul_rodasdemuda_locals_lambda[] = "Modul.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_C_Users_Daniel_Dropbox_projectos[] = "C:\\Users\\Daniel\\Dropbox\\projectos\\GitHub\\ACalc\\acalc\\tools\\rodasdemuda.pyx";
static const char __pyx_k_Heckert_rodasdemuda_locals_lambd[] = "Heckert.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_Lindner_rodasdemuda_locals_lambd[] = "Lindner.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_Pfauter251_rodasdemuda_locals_la[] = "Pfauter251.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_Pfauter630_rodasdemuda_locals_la[] = "Pfauter630.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_ReishauerDressage_rodasdemuda_lo[] = "ReishauerDressage.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_Reishauer_rodasdemuda_locals_lam[] = "Reishauer.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_Rollete_rodasdemuda_locals_lambd[] = "Rollete.rodasdemuda.<locals>.<lambda>";
static const char __pyx_k_Spiromatic_rodasdemuda6_locals_l[] = "Spiromatic.rodasdemuda6.<locals>.<lambda>";
static const char __pyx_k_Spiromatic_rodasdemuda_locals_la[] = "Spiromatic.rodasdemuda.<locals>.<lambda>";
static PyObject *__pyx_kp_s_250x5;
static PyObject *__pyx_kp_s_31_March_2013;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_kp_s_C_Users_Daniel_Dropbox_projectos;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_DIFERENCIAL;
static PyObject *__pyx_n_s_DIREITA;
static PyObject *__pyx_kp_s_Daniel_Oliveira;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_ESQUERDA;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_n_s_Heckert;
static PyObject *__pyx_kp_s_Heckert_ZFWG_250;
static PyObject *__pyx_n_s_Heckert___init;
static PyObject *__pyx_n_s_Heckert_limites;
static PyObject *__pyx_n_s_Heckert_rodasdemuda;
static PyObject *__pyx_n_s_Heckert_rodasdemuda_locals_lambd;
static PyObject *__pyx_n_s_LINDNER;
static PyObject *__pyx_n_s_Lindner;
static PyObject *__pyx_n_s_Lindner___init;
static PyObject *__pyx_n_s_Lindner_limites;
static PyObject *__pyx_n_s_Lindner_rodasdemuda;
static PyObject *__pyx_n_s_Lindner_rodasdemuda_locals_lambd;
static PyObject *__pyx_n_s_MAX;
static PyObject *__pyx_n_s_MAX_A;
static PyObject *__pyx_n_s_MAX_AB;
static PyObject *__pyx_n_s_MAX_B;
static PyObject *__pyx_n_s_MAX_C;
static PyObject *__pyx_n_s_MAX_CD;
static PyObject *__pyx_n_s_MAX_D;
static PyObject *__pyx_n_s_MAX_EF;
static PyObject *__pyx_n_s_MAX_F;
static PyObject *__pyx_n_s_MAX_T;
static PyObject *__pyx_n_s_MIN;
static PyObject *__pyx_n_s_MIN_AB;
static PyObject *__pyx_n_s_MIN_CD;
static PyObject *__pyx_n_s_MIN_EF;
static PyObject *__pyx_n_s_MIN_T;
static PyObject *__pyx_n_s_MIN_T_AB;
static PyObject *__pyx_n_s_MIN_T_CD;
static PyObject *__pyx_n_s_Modul;
static PyObject *__pyx_n_s_Modul___init;
static PyObject *__pyx_n_s_Modul_limites;
static PyObject *__pyx_n_s_Modul_rodasdemuda;
static PyObject *__pyx_n_s_Modul_rodasdemuda_locals_lambda;
static PyObject *__pyx_n_s_NAVALHAO;
static PyObject *__pyx_n_s_P2300;
static PyObject *__pyx_n_s_P251;
static PyObject *__pyx_n_s_P630;
static PyObject *__pyx_n_s_Pfauter251;
static PyObject *__pyx_n_s_Pfauter251___init;
static PyObject *__pyx_n_s_Pfauter251_limites;
static PyObject *__pyx_n_s_Pfauter251_rodasdemuda;
static PyObject *__pyx_n_s_Pfauter251_rodasdemuda_locals_la;
static PyObject *__pyx_n_s_Pfauter630;
static PyObject *__pyx_n_s_Pfauter630___init;
static PyObject *__pyx_n_s_Pfauter630_limites;
static PyObject *__pyx_n_s_Pfauter630_rodasdemuda;
static PyObject *__pyx_n_s_Pfauter630_rodasdemuda_locals_la;
static PyObject *__pyx_n_s_Reishauer;
static PyObject *__pyx_n_s_ReishauerDressage;
static PyObject *__pyx_n_s_ReishauerDressage___init;
static PyObject *__pyx_n_s_ReishauerDressage_limites;
static PyObject *__pyx_n_s_ReishauerDressage_rodasdemuda;
static PyObject *__pyx_n_s_ReishauerDressage_rodasdemuda_lo;
static PyObject *__pyx_n_s_Reishauer___init;
static PyObject *__pyx_n_s_Reishauer_limites;
static PyObject *__pyx_n_s_Reishauer_rodasdemuda;
static PyObject *__pyx_n_s_Reishauer_rodasdemuda_locals_lam;
static PyObject *__pyx_n_s_Rollete;
static PyObject *__pyx_n_s_Rollete___init;
static PyObject *__pyx_n_s_Rollete_limites;
static PyObject *__pyx_n_s_Rollete_rodasdemuda;
static PyObject *__pyx_n_s_Rollete_rodasdemuda_locals_lambd;
static PyObject *__pyx_kp_s_Runderland_5A_4C;
static PyObject *__pyx_n_s_Spiromatic;
static PyObject *__pyx_n_s_Spiromatic___init;
static PyObject *__pyx_n_s_Spiromatic_limites;
static PyObject *__pyx_n_s_Spiromatic_rodasdemuda;
static PyObject *__pyx_n_s_Spiromatic_rodasdemuda6;
static PyObject *__pyx_n_s_Spiromatic_rodasdemuda6_locals_l;
static PyObject *__pyx_n_s_Spiromatic_rodasdemuda_locals_la;
static PyObject *__pyx_n_s_TANGENCIAL;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_beta_2;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_common;
static PyObject *__pyx_n_s_conj_rodas;
static PyObject *__pyx_n_s_conjunto;
static PyObject *__pyx_n_s_contact;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_kp_s_danielfilipe_mo_gmail_com;
static PyObject *__pyx_n_s_date;
static PyObject *__pyx_n_s_degrees;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_entradas;
static PyObject *__pyx_n_s_err;
static PyObject *__pyx_n_s_erro;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_giter;
static PyObject *__pyx_n_s_groupby;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_itemgetter;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keyfunc;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_limites;
static PyObject *__pyx_n_s_lrodas;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_modelo;
static PyObject *__pyx_n_s_modo;
static PyObject *__pyx_n_s_modo_2;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_modulo;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_operator;
static PyObject *__pyx_n_s_pfauter2300;
static PyObject *__pyx_n_s_pfauter251;
static PyObject *__pyx_n_s_pfauter630;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_radians;
static PyObject *__pyx_n_s_razao;
static PyObject *__pyx_n_s_razaom;
static PyObject *__pyx_n_s_reishauer;
static PyObject *__pyx_n_s_reishauer_dressage;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_rodas;
static PyObject *__pyx_n_s_rodasdemuda;
static PyObject *__pyx_n_s_rodasdemuda6;
static PyObject *__pyx_n_s_rollete;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_sentido;
static PyObject *__pyx_n_s_sentido_2;
static PyObject *__pyx_n_s_six2dec;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_w_2;
static PyObject *__pyx_n_s_zO;
static PyObject *__pyx_pf_11rodasdemuda_7Rollete___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Rollete_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Rollete_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_9Reishauer___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_9Reishauer_2limites(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_9Reishauer_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_17ReishauerDressage___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_17ReishauerDressage_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_17ReishauerDressage_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter251___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter251_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter251_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_6__init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_8limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda5(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_10rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_5Modul___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_5Modul_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda6(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_5Modul_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Lindner___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Lindner_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Lindner_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Heckert___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Heckert_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_7Heckert_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda9(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda10(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic_6rodasdemuda6(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro); /* proto */
static PyObject *__pyx_float_4_5;
static PyObject *__pyx_float_25_4;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_21;
static PyObject *__pyx_int_22;
static PyObject *__pyx_int_23;
static PyObject *__pyx_int_24;
static PyObject *__pyx_int_25;
static PyObject *__pyx_int_26;
static PyObject *__pyx_int_27;
static PyObject *__pyx_int_28;
static PyObject *__pyx_int_29;
static PyObject *__pyx_int_30;
static PyObject *__pyx_int_31;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_34;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_36;
static PyObject *__pyx_int_37;
static PyObject *__pyx_int_38;
static PyObject *__pyx_int_39;
static PyObject *__pyx_int_40;
static PyObject *__pyx_int_41;
static PyObject *__pyx_int_42;
static PyObject *__pyx_int_43;
static PyObject *__pyx_int_44;
static PyObject *__pyx_int_45;
static PyObject *__pyx_int_46;
static PyObject *__pyx_int_47;
static PyObject *__pyx_int_48;
static PyObject *__pyx_int_49;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_51;
static PyObject *__pyx_int_52;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_54;
static PyObject *__pyx_int_55;
static PyObject *__pyx_int_56;
static PyObject *__pyx_int_57;
static PyObject *__pyx_int_58;
static PyObject *__pyx_int_59;
static PyObject *__pyx_int_60;
static PyObject *__pyx_int_61;
static PyObject *__pyx_int_62;
static PyObject *__pyx_int_63;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_65;
static PyObject *__pyx_int_66;
static PyObject *__pyx_int_67;
static PyObject *__pyx_int_68;
static PyObject *__pyx_int_69;
static PyObject *__pyx_int_70;
static PyObject *__pyx_int_71;
static PyObject *__pyx_int_72;
static PyObject *__pyx_int_73;
static PyObject *__pyx_int_74;
static PyObject *__pyx_int_75;
static PyObject *__pyx_int_76;
static PyObject *__pyx_int_77;
static PyObject *__pyx_int_78;
static PyObject *__pyx_int_79;
static PyObject *__pyx_int_80;
static PyObject *__pyx_int_81;
static PyObject *__pyx_int_82;
static PyObject *__pyx_int_83;
static PyObject *__pyx_int_84;
static PyObject *__pyx_int_85;
static PyObject *__pyx_int_86;
static PyObject *__pyx_int_87;
static PyObject *__pyx_int_88;
static PyObject *__pyx_int_89;
static PyObject *__pyx_int_90;
static PyObject *__pyx_int_91;
static PyObject *__pyx_int_92;
static PyObject *__pyx_int_93;
static PyObject *__pyx_int_94;
static PyObject *__pyx_int_95;
static PyObject *__pyx_int_96;
static PyObject *__pyx_int_97;
static PyObject *__pyx_int_98;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_101;
static PyObject *__pyx_int_102;
static PyObject *__pyx_int_103;
static PyObject *__pyx_int_104;
static PyObject *__pyx_int_105;
static PyObject *__pyx_int_106;
static PyObject *__pyx_int_107;
static PyObject *__pyx_int_108;
static PyObject *__pyx_int_109;
static PyObject *__pyx_int_110;
static PyObject *__pyx_int_112;
static PyObject *__pyx_int_113;
static PyObject *__pyx_int_118;
static PyObject *__pyx_int_120;
static PyObject *__pyx_int_127;
static PyObject *__pyx_int_180;
static PyObject *__pyx_int_570;
static PyObject *__pyx_int_3800;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_slice__6;
static PyObject *__pyx_slice__9;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_slice__12;
static PyObject *__pyx_slice__15;
static PyObject *__pyx_slice__18;
static PyObject *__pyx_slice__21;
static PyObject *__pyx_slice__24;
static PyObject *__pyx_slice__27;
static PyObject *__pyx_slice__30;
static PyObject *__pyx_slice__32;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;

/* "rodasdemuda.pyx":14
 * # modulo, beta
 * class Rollete (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'rollete'
 * 		self._modelo 		= 'Runderland 5A-4C'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Rollete_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_7Rollete_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 14, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 14, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Rollete.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Rollete___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_7Rollete___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":15
 * class Rollete (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'rollete'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'Runderland 5A-4C'
 * 		self._conj_rodas 	= (27,28,30,30,32,33,35,36,38,39,40,40,40,42,42,44,45,46,48,48,50,51,52,53,54,55,56,57,58,59,60,60,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,79,82,83,84,86,89,93,94,96,97,100,105,107,108,110,120,127)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_rollete) < 0) __PYX_ERR(0, 15, __pyx_L1_error)

  /* "rodasdemuda.pyx":16
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'rollete'
 * 		self._modelo 		= 'Runderland 5A-4C'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (27,28,30,30,32,33,35,36,38,39,40,40,40,42,42,44,45,46,48,48,50,51,52,53,54,55,56,57,58,59,60,60,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,79,82,83,84,86,89,93,94,96,97,100,105,107,108,110,120,127)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_kp_s_Runderland_5A_4C) < 0) __PYX_ERR(0, 16, __pyx_L1_error)

  /* "rodasdemuda.pyx":17
 * 		self._name 			= 'rollete'
 * 		self._modelo 		= 'Runderland 5A-4C'
 * 		self._conj_rodas 	= (27,28,30,30,32,33,35,36,38,39,40,40,40,42,42,44,45,46,48,48,50,51,52,53,54,55,56,57,58,59,60,60,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,79,82,83,84,86,89,93,94,96,97,100,105,107,108,110,120,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple_) < 0) __PYX_ERR(0, 17, __pyx_L1_error)

  /* "rodasdemuda.pyx":18
 * 		self._modelo 		= 'Runderland 5A-4C'
 * 		self._conj_rodas 	= (27,28,30,30,32,33,35,36,38,39,40,40,40,42,42,44,45,46,48,48,50,51,52,53,54,55,56,57,58,59,60,60,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,79,82,83,84,86,89,93,94,96,97,100,105,107,108,110,120,127)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":19
 * 		self._conj_rodas 	= (27,28,30,30,32,33,35,36,38,39,40,40,40,42,42,44,45,46,48,48,50,51,52,53,54,55,56,57,58,59,60,60,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,79,82,83,84,86,89,93,94,96,97,100,105,107,108,110,120,127)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)             # <<<<<<<<<<<<<<
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._razao 		= self._m/4.5*cos(self._beta) 	#modulo e beta
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_beta, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":20
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))             # <<<<<<<<<<<<<<
 * 		self._razao 		= self._m/4.5*cos(self._beta) 	#modulo e beta
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_six2dec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":21
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._razao 		= self._m/4.5*cos(self._beta) 	#modulo e beta             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_4_5, 4.5, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(cos(__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_7) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "rodasdemuda.pyx":14
 * # modulo, beta
 * class Rollete (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'rollete'
 * 		self._modelo 		= 'Runderland 5A-4C'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Rollete.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":23
 * 		self._razao 		= self._m/4.5*cos(self._beta) 	#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Rollete_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_7Rollete_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 23, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 23, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Rollete.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Rollete_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_7Rollete_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_CD;
  long __pyx_v_MIN_AB;
  long __pyx_v_MIN_CD;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":24
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":25
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":24
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":27
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":28
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":29
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":30
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		MAX_AB	=	120			# A+B <=
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":32
 * 			D = conjunto[3]
 * 
 * 		MAX_AB	=	120			# A+B <=             # <<<<<<<<<<<<<<
 * 		MAX_CD	=	135			# C+D <=
 * 		MIN_AB	=	78			# A+B >=
 */
  __pyx_v_MAX_AB = 0x78;

  /* "rodasdemuda.pyx":33
 * 
 * 		MAX_AB	=	120			# A+B <=
 * 		MAX_CD	=	135			# C+D <=             # <<<<<<<<<<<<<<
 * 		MIN_AB	=	78			# A+B >=
 * 		MIN_CD	=	88			# C+D >=
 */
  __pyx_v_MAX_CD = 0x87;

  /* "rodasdemuda.pyx":34
 * 		MAX_AB	=	120			# A+B <=
 * 		MAX_CD	=	135			# C+D <=
 * 		MIN_AB	=	78			# A+B >=             # <<<<<<<<<<<<<<
 * 		MIN_CD	=	88			# C+D >=
 * 
 */
  __pyx_v_MIN_AB = 78;

  /* "rodasdemuda.pyx":35
 * 		MAX_CD	=	135			# C+D <=
 * 		MIN_AB	=	78			# A+B >=
 * 		MIN_CD	=	88			# C+D >=             # <<<<<<<<<<<<<<
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB and C+D>=MIN_CD:
 */
  __pyx_v_MIN_CD = 88;

  /* "rodasdemuda.pyx":37
 * 		MIN_CD	=	88			# C+D >=
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB and C+D>=MIN_CD:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else:
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":38
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB and C+D>=MIN_CD:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else:
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":37
 * 		MIN_CD	=	88			# C+D >=
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB and C+D>=MIN_CD:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else:
 */
  }

  /* "rodasdemuda.pyx":40
 * 			return True
 * 		else:
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":23
 * 		self._razao 		= self._m/4.5*cos(self._beta) 	#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Rollete.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":42
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Rollete_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_7Rollete_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 42, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 42, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Rollete.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Rollete_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":69
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_11rodasdemuda_lambda(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Rollete_11rodasdemuda_lambda = {"lambda", (PyCFunction)__pyx_pw_11rodasdemuda_7Rollete_11rodasdemuda_lambda, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Rollete_11rodasdemuda_lambda(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Rollete.rodasdemuda.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":42
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_7Rollete_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":44
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":45
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":48
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":49
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":50
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":51
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":52
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":54
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":56
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":58
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":59
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":60
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":61
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":62
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 62, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 62, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":63
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 63, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 63, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":64
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":65
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 65, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 65, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 65, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 65, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 65, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 65, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 65, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 65, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 65, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":66
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 66, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":65
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":64
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":69
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Rollete_11rodasdemuda_lambda, 0, __pyx_n_s_Rollete_rodasdemuda_locals_lambd, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":70
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":71
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 71, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 71, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 71, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 71, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 71, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 71, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":74
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":77
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":78
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__3, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":77
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":80
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # modulo, beta, sentido
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":42
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Rollete.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":84
 * # modulo, beta, sentido
 * class Reishauer (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer'
 * 		self._modelo 		= 'reishauer'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_9Reishauer_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_9Reishauer_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 84, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 84, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Reishauer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_9Reishauer___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_9Reishauer___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":85
 * class Reishauer (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_reishauer) < 0) __PYX_ERR(0, 85, __pyx_L1_error)

  /* "rodasdemuda.pyx":86
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer'
 * 		self._modelo 		= 'reishauer'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_n_s_reishauer) < 0) __PYX_ERR(0, 86, __pyx_L1_error)

  /* "rodasdemuda.pyx":87
 * 		self._name 			= 'reishauer'
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__4) < 0) __PYX_ERR(0, 87, __pyx_L1_error)

  /* "rodasdemuda.pyx":88
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":89
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)             # <<<<<<<<<<<<<<
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._sentido		= str(kwargs.get('sentido', None)).upper()
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_beta, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":90
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))             # <<<<<<<<<<<<<<
 * 		self._sentido		= str(kwargs.get('sentido', None)).upper()
 * 		self._razao 		= 11.6909*sin(self._beta)/self._m			#modulo e beta
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_six2dec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":91
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._sentido		= str(kwargs.get('sentido', None)).upper()             # <<<<<<<<<<<<<<
 * 		self._razao 		= 11.6909*sin(self._beta)/self._m			#modulo e beta
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_sentido, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sentido_2, __pyx_t_1) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":92
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._sentido		= str(kwargs.get('sentido', None)).upper()
 * 		self._razao 		= 11.6909*sin(self._beta)/self._m			#modulo e beta             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((11.6909 * sin(__pyx_t_8))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_2) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rodasdemuda.pyx":84
 * # modulo, beta, sentido
 * class Reishauer (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer'
 * 		self._modelo 		= 'reishauer'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Reishauer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":94
 * 		self._razao 		= 11.6909*sin(self._beta)/self._m			#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_9Reishauer_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_9Reishauer_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 94, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 94, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Reishauer.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_9Reishauer_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_9Reishauer_2limites(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_A;
  PyObject *__pyx_v_MAX_B = NULL;
  PyObject *__pyx_v_MAX_C = NULL;
  long __pyx_v_MAX_D;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_T;
  long __pyx_v_MIN_AB;
  long __pyx_v_MIN_T_AB;
  long __pyx_v_MIN_CD;
  long __pyx_v_MIN_T_CD;
  long __pyx_v_MAX;
  long __pyx_v_MIN;
  long __pyx_v_MIN_T;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":95
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":96
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":95
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":98
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":99
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":100
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":101
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		MAX_A	=	105			# A <=
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":103
 * 			D = conjunto[3]
 * 
 * 		MAX_A	=	105			# A <=             # <<<<<<<<<<<<<<
 * 		MAX_B	=	C+D-34		# B <=
 * 		MAX_C	=	A+B-23		# C <=
 */
  __pyx_v_MAX_A = 0x69;

  /* "rodasdemuda.pyx":104
 * 
 * 		MAX_A	=	105			# A <=
 * 		MAX_B	=	C+D-34		# B <=             # <<<<<<<<<<<<<<
 * 		MAX_C	=	A+B-23		# C <=
 * 		MAX_D	=	120			# D <=
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_34, 34, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_MAX_B = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":105
 * 		MAX_A	=	105			# A <=
 * 		MAX_B	=	C+D-34		# B <=
 * 		MAX_C	=	A+B-23		# C <=             # <<<<<<<<<<<<<<
 * 		MAX_D	=	120			# D <=
 * 
 */
  __pyx_t_4 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_23, 23, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_MAX_C = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rodasdemuda.pyx":106
 * 		MAX_B	=	C+D-34		# B <=
 * 		MAX_C	=	A+B-23		# C <=
 * 		MAX_D	=	120			# D <=             # <<<<<<<<<<<<<<
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D:
 */
  __pyx_v_MAX_D = 0x78;

  /* "rodasdemuda.pyx":108
 * 		MAX_D	=	120			# D <=
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			if self._sentido == "ESQUERDA":
 * 				MAX_AB	=	190			# A+B <=
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_A); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_A, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_v_MAX_B, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_C, __pyx_v_MAX_C, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_D, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":109
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D:
 * 			if self._sentido == "ESQUERDA":             # <<<<<<<<<<<<<<
 * 				MAX_AB	=	190			# A+B <=
 * 				MAX_T	=	394			# A+B+C+D se A+B maximo
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentido_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_ESQUERDA, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "rodasdemuda.pyx":110
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D:
 * 			if self._sentido == "ESQUERDA":
 * 				MAX_AB	=	190			# A+B <=             # <<<<<<<<<<<<<<
 * 				MAX_T	=	394			# A+B+C+D se A+B maximo
 * 				MIN_AB	=	84			# A+B >=
 */
      __pyx_v_MAX_AB = 0xBE;

      /* "rodasdemuda.pyx":111
 * 			if self._sentido == "ESQUERDA":
 * 				MAX_AB	=	190			# A+B <=
 * 				MAX_T	=	394			# A+B+C+D se A+B maximo             # <<<<<<<<<<<<<<
 * 				MIN_AB	=	84			# A+B >=
 * 				MIN_T_AB=	264			# A+B+C+D se A+B minimo
 */
      __pyx_v_MAX_T = 0x18A;

      /* "rodasdemuda.pyx":112
 * 				MAX_AB	=	190			# A+B <=
 * 				MAX_T	=	394			# A+B+C+D se A+B maximo
 * 				MIN_AB	=	84			# A+B >=             # <<<<<<<<<<<<<<
 * 				MIN_T_AB=	264			# A+B+C+D se A+B minimo
 * 				MIN_CD	=	90			# D+C >=
 */
      __pyx_v_MIN_AB = 84;

      /* "rodasdemuda.pyx":113
 * 				MAX_T	=	394			# A+B+C+D se A+B maximo
 * 				MIN_AB	=	84			# A+B >=
 * 				MIN_T_AB=	264			# A+B+C+D se A+B minimo             # <<<<<<<<<<<<<<
 * 				MIN_CD	=	90			# D+C >=
 * 				MIN_T_CD=	229			# A+B+C+D se C+D minimo
 */
      __pyx_v_MIN_T_AB = 0x108;

      /* "rodasdemuda.pyx":114
 * 				MIN_AB	=	84			# A+B >=
 * 				MIN_T_AB=	264			# A+B+C+D se A+B minimo
 * 				MIN_CD	=	90			# D+C >=             # <<<<<<<<<<<<<<
 * 				MIN_T_CD=	229			# A+B+C+D se C+D minimo
 * 
 */
      __pyx_v_MIN_CD = 90;

      /* "rodasdemuda.pyx":115
 * 				MIN_T_AB=	264			# A+B+C+D se A+B minimo
 * 				MIN_CD	=	90			# D+C >=
 * 				MIN_T_CD=	229			# A+B+C+D se C+D minimo             # <<<<<<<<<<<<<<
 * 
 * 				if ( A+B<=MAX_AB and A+B+C+D<=MAX_T ) and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):
 */
      __pyx_v_MIN_T_CD = 0xE5;

      /* "rodasdemuda.pyx":117
 * 				MIN_T_CD=	229			# A+B+C+D se C+D minimo
 * 
 * 				if ( A+B<=MAX_AB and A+B+C+D<=MAX_T ) and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):             # <<<<<<<<<<<<<<
 * 					return True
 * 				else :
 */
      __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_6 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (!__pyx_t_5) {
        goto __pyx_L14_next_or;
      } else {
      }
      __pyx_t_6 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_T_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_L14_next_or:;
      __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_6 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_T_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_2 = __pyx_t_5;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_2) {

        /* "rodasdemuda.pyx":118
 * 
 * 				if ( A+B<=MAX_AB and A+B+C+D<=MAX_T ) and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):
 * 					return True             # <<<<<<<<<<<<<<
 * 				else :
 * 					return False
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L0;

        /* "rodasdemuda.pyx":117
 * 				MIN_T_CD=	229			# A+B+C+D se C+D minimo
 * 
 * 				if ( A+B<=MAX_AB and A+B+C+D<=MAX_T ) and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):             # <<<<<<<<<<<<<<
 * 					return True
 * 				else :
 */
      }

      /* "rodasdemuda.pyx":120
 * 					return True
 * 				else :
 * 					return False             # <<<<<<<<<<<<<<
 * 
 * 			elif self._sentido == "DIREITA":
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L0;
      }

      /* "rodasdemuda.pyx":109
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D:
 * 			if self._sentido == "ESQUERDA":             # <<<<<<<<<<<<<<
 * 				MAX_AB	=	190			# A+B <=
 * 				MAX_T	=	394			# A+B+C+D se A+B maximo
 */
    }

    /* "rodasdemuda.pyx":122
 * 					return False
 * 
 * 			elif self._sentido == "DIREITA":             # <<<<<<<<<<<<<<
 * 				MAX		=	193			# C+D <=
 * 				MAX_T	=	383			# A+B+C+D se C+D maximo
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentido_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_DIREITA, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "rodasdemuda.pyx":123
 * 
 * 			elif self._sentido == "DIREITA":
 * 				MAX		=	193			# C+D <=             # <<<<<<<<<<<<<<
 * 				MAX_T	=	383			# A+B+C+D se C+D maximo
 * 				MIN		=	71			# C+D >=
 */
      __pyx_v_MAX = 0xC1;

      /* "rodasdemuda.pyx":124
 * 			elif self._sentido == "DIREITA":
 * 				MAX		=	193			# C+D <=
 * 				MAX_T	=	383			# A+B+C+D se C+D maximo             # <<<<<<<<<<<<<<
 * 				MIN		=	71			# C+D >=
 * 				MIN_T	=	153			# A+B+C+D se C+D minimo
 */
      __pyx_v_MAX_T = 0x17F;

      /* "rodasdemuda.pyx":125
 * 				MAX		=	193			# C+D <=
 * 				MAX_T	=	383			# A+B+C+D se C+D maximo
 * 				MIN		=	71			# C+D >=             # <<<<<<<<<<<<<<
 * 				MIN_T	=	153			# A+B+C+D se C+D minimo
 * 
 */
      __pyx_v_MIN = 71;

      /* "rodasdemuda.pyx":126
 * 				MAX_T	=	383			# A+B+C+D se C+D maximo
 * 				MIN		=	71			# C+D >=
 * 				MIN_T	=	153			# A+B+C+D se C+D minimo             # <<<<<<<<<<<<<<
 * 
 * 				if ( (C+D<=MAX) and (A+B+C+D<=MAX_T) ) and (C+D>=MIN) and (A+B+C+D>=MIN_T):
 */
      __pyx_v_MIN_T = 0x99;

      /* "rodasdemuda.pyx":128
 * 				MIN_T	=	153			# A+B+C+D se C+D minimo
 * 
 * 				if ( (C+D<=MAX) and (A+B+C+D<=MAX_T) ) and (C+D>=MIN) and (A+B+C+D>=MIN_T):             # <<<<<<<<<<<<<<
 * 					return True
 * 				else :
 */
      __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_6 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_6 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_2 = __pyx_t_5;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_2) {

        /* "rodasdemuda.pyx":129
 * 
 * 				if ( (C+D<=MAX) and (A+B+C+D<=MAX_T) ) and (C+D>=MIN) and (A+B+C+D>=MIN_T):
 * 					return True             # <<<<<<<<<<<<<<
 * 				else :
 * 					return False
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L0;

        /* "rodasdemuda.pyx":128
 * 				MIN_T	=	153			# A+B+C+D se C+D minimo
 * 
 * 				if ( (C+D<=MAX) and (A+B+C+D<=MAX_T) ) and (C+D>=MIN) and (A+B+C+D>=MIN_T):             # <<<<<<<<<<<<<<
 * 					return True
 * 				else :
 */
      }

      /* "rodasdemuda.pyx":131
 * 					return True
 * 				else :
 * 					return False             # <<<<<<<<<<<<<<
 * 
 * 			else:
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L0;
      }

      /* "rodasdemuda.pyx":122
 * 					return False
 * 
 * 			elif self._sentido == "DIREITA":             # <<<<<<<<<<<<<<
 * 				MAX		=	193			# C+D <=
 * 				MAX_T	=	383			# A+B+C+D se C+D maximo
 */
    }

    /* "rodasdemuda.pyx":134
 * 
 * 			else:
 * 				return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }

    /* "rodasdemuda.pyx":108
 * 		MAX_D	=	120			# D <=
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			if self._sentido == "ESQUERDA":
 * 				MAX_AB	=	190			# A+B <=
 */
  }

  /* "rodasdemuda.pyx":94
 * 		self._razao 		= 11.6909*sin(self._beta)/self._m			#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rodasdemuda.Reishauer.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_MAX_B);
  __Pyx_XDECREF(__pyx_v_MAX_C);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":137
 * 
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_9Reishauer_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_9Reishauer_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 137, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 137, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Reishauer.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_9Reishauer_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":164
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_11rodasdemuda_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_9Reishauer_11rodasdemuda_lambda1 = {"lambda1", (PyCFunction)__pyx_pw_11rodasdemuda_9Reishauer_11rodasdemuda_lambda1, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_9Reishauer_11rodasdemuda_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Reishauer.rodasdemuda.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":137
 * 
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_9Reishauer_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":139
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":140
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":143
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":144
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":145
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":146
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":147
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":149
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":151
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":153
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":154
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":155
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":156
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":157
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 157, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 157, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":158
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 158, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 158, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":159
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":160
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 160, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 160, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 160, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 160, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":161
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 161, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":160
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":159
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":164
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_9Reishauer_11rodasdemuda_lambda1, 0, __pyx_n_s_Reishauer_rodasdemuda_locals_lam, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":165
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":166
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 166, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 166, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":169
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":172
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":173
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__6, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":172
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":175
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # Modulo
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":137
 * 
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Reishauer.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":179
 * # Modulo
 * class ReishauerDressage (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer_dressage'
 * 		self._modelo 		= 'reishauer'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_17ReishauerDressage_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_17ReishauerDressage_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 179, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 179, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.ReishauerDressage.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_17ReishauerDressage___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_17ReishauerDressage___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":180
 * class ReishauerDressage (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer_dressage'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_reishauer_dressage) < 0) __PYX_ERR(0, 180, __pyx_L1_error)

  /* "rodasdemuda.pyx":181
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer_dressage'
 * 		self._modelo 		= 'reishauer'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_n_s_reishauer) < 0) __PYX_ERR(0, 181, __pyx_L1_error)

  /* "rodasdemuda.pyx":182
 * 		self._name 			= 'reishauer_dressage'
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__7) < 0) __PYX_ERR(0, 182, __pyx_L1_error)

  /* "rodasdemuda.pyx":183
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":184
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  __pyx_t_1 = PyFloat_FromDouble((6.0 / 25.4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_3) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_3) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rodasdemuda.pyx":179
 * # Modulo
 * class ReishauerDressage (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer_dressage'
 * 		self._modelo 		= 'reishauer'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rodasdemuda.ReishauerDressage.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":186
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_17ReishauerDressage_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_17ReishauerDressage_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 186, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 186, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.ReishauerDressage.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_17ReishauerDressage_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_17ReishauerDressage_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_A;
  PyObject *__pyx_v_MAX_B = NULL;
  PyObject *__pyx_v_MAX_C = NULL;
  long __pyx_v_MAX_D;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_CD;
  long __pyx_v_MAX_T;
  long __pyx_v_MIN_AB;
  long __pyx_v_MIN_T_AB;
  long __pyx_v_MIN_CD;
  long __pyx_v_MIN_T_CD;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":187
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":188
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":187
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":190
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":191
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":192
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":193
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		MAX_A	=	60			# A <=
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":195
 * 			D = conjunto[3]
 * 
 * 		MAX_A	=	60			# A <=             # <<<<<<<<<<<<<<
 * 		MAX_B	=	C+D-34		# C <= C+D-34
 * 		MAX_C	=	A+B-23		# C <= A+B-23
 */
  __pyx_v_MAX_A = 60;

  /* "rodasdemuda.pyx":196
 * 
 * 		MAX_A	=	60			# A <=
 * 		MAX_B	=	C+D-34		# C <= C+D-34             # <<<<<<<<<<<<<<
 * 		MAX_C	=	A+B-23		# C <= A+B-23
 * 		MAX_D	=	105			# D <=
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_34, 34, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_MAX_B = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":197
 * 		MAX_A	=	60			# A <=
 * 		MAX_B	=	C+D-34		# C <= C+D-34
 * 		MAX_C	=	A+B-23		# C <= A+B-23             # <<<<<<<<<<<<<<
 * 		MAX_D	=	105			# D <=
 * 		MAX_AB	=	166			# A+B <=
 */
  __pyx_t_4 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_23, 23, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_MAX_C = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rodasdemuda.pyx":198
 * 		MAX_B	=	C+D-34		# C <= C+D-34
 * 		MAX_C	=	A+B-23		# C <= A+B-23
 * 		MAX_D	=	105			# D <=             # <<<<<<<<<<<<<<
 * 		MAX_AB	=	166			# A+B <=
 * 		MAX_CD	=	145			# C+D <=
 */
  __pyx_v_MAX_D = 0x69;

  /* "rodasdemuda.pyx":199
 * 		MAX_C	=	A+B-23		# C <= A+B-23
 * 		MAX_D	=	105			# D <=
 * 		MAX_AB	=	166			# A+B <=             # <<<<<<<<<<<<<<
 * 		MAX_CD	=	145			# C+D <=
 * 		MAX_T	=	311			# A+B+C+D <=
 */
  __pyx_v_MAX_AB = 0xA6;

  /* "rodasdemuda.pyx":200
 * 		MAX_D	=	105			# D <=
 * 		MAX_AB	=	166			# A+B <=
 * 		MAX_CD	=	145			# C+D <=             # <<<<<<<<<<<<<<
 * 		MAX_T	=	311			# A+B+C+D <=
 * 		MIN_AB	=	84			# A+B >=
 */
  __pyx_v_MAX_CD = 0x91;

  /* "rodasdemuda.pyx":201
 * 		MAX_AB	=	166			# A+B <=
 * 		MAX_CD	=	145			# C+D <=
 * 		MAX_T	=	311			# A+B+C+D <=             # <<<<<<<<<<<<<<
 * 		MIN_AB	=	84			# A+B >=
 * 		MIN_T_AB=	229			# A+B+C+D se A+B minimo
 */
  __pyx_v_MAX_T = 0x137;

  /* "rodasdemuda.pyx":202
 * 		MAX_CD	=	145			# C+D <=
 * 		MAX_T	=	311			# A+B+C+D <=
 * 		MIN_AB	=	84			# A+B >=             # <<<<<<<<<<<<<<
 * 		MIN_T_AB=	229			# A+B+C+D se A+B minimo
 * 		MIN_CD	=	108			# C+D >=
 */
  __pyx_v_MIN_AB = 84;

  /* "rodasdemuda.pyx":203
 * 		MAX_T	=	311			# A+B+C+D <=
 * 		MIN_AB	=	84			# A+B >=
 * 		MIN_T_AB=	229			# A+B+C+D se A+B minimo             # <<<<<<<<<<<<<<
 * 		MIN_CD	=	108			# C+D >=
 * 		MIN_T_CD=	216			# A+B+C+D SE C+D minimo
 */
  __pyx_v_MIN_T_AB = 0xE5;

  /* "rodasdemuda.pyx":204
 * 		MIN_AB	=	84			# A+B >=
 * 		MIN_T_AB=	229			# A+B+C+D se A+B minimo
 * 		MIN_CD	=	108			# C+D >=             # <<<<<<<<<<<<<<
 * 		MIN_T_CD=	216			# A+B+C+D SE C+D minimo
 * 
 */
  __pyx_v_MIN_CD = 0x6C;

  /* "rodasdemuda.pyx":205
 * 		MIN_T_AB=	229			# A+B+C+D se A+B minimo
 * 		MIN_CD	=	108			# C+D >=
 * 		MIN_T_CD=	216			# A+B+C+D SE C+D minimo             # <<<<<<<<<<<<<<
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D and A+B<=MAX_AB and A+B+C+D<=MAX_T and C+D<=MAX_CD and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):
 */
  __pyx_v_MIN_T_CD = 0xD8;

  /* "rodasdemuda.pyx":207
 * 		MIN_T_CD=	216			# A+B+C+D SE C+D minimo
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D and A+B<=MAX_AB and A+B+C+D<=MAX_T and C+D<=MAX_CD and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_A); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_A, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_v_MAX_B, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_C, __pyx_v_MAX_C, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_D, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_5) {
    goto __pyx_L13_next_or;
  } else {
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_T_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_L13_next_or:;
  __pyx_t_6 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_C); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_T_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":208
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D and A+B<=MAX_AB and A+B+C+D<=MAX_T and C+D<=MAX_CD and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):
 * 			return True             # <<<<<<<<<<<<<<
 * 		else :
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":207
 * 		MIN_T_CD=	216			# A+B+C+D SE C+D minimo
 * 
 * 		if A<=MAX_A and B<=MAX_B and C<=MAX_C and D<=MAX_D and A+B<=MAX_AB and A+B+C+D<=MAX_T and C+D<=MAX_CD and ( ( C+D>=MIN_CD and A+B+C+D>=MIN_T_CD ) or ( A+B>=MIN_AB and A+B+C+D>=MIN_T_AB ) ):             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":210
 * 			return True
 * 		else :
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":186
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rodasdemuda.ReishauerDressage.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_MAX_B);
  __Pyx_XDECREF(__pyx_v_MAX_C);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":212
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_17ReishauerDressage_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_17ReishauerDressage_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 212, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 212, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.ReishauerDressage.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_17ReishauerDressage_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":239
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_11rodasdemuda_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_17ReishauerDressage_11rodasdemuda_lambda2 = {"lambda2", (PyCFunction)__pyx_pw_11rodasdemuda_17ReishauerDressage_11rodasdemuda_lambda2, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_17ReishauerDressage_11rodasdemuda_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.ReishauerDressage.rodasdemuda.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":212
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_17ReishauerDressage_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":214
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":215
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":218
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":219
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":220
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":221
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":222
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":224
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":226
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":228
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":229
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":230
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":231
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":232
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 232, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 232, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":233
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 233, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 233, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 233, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":234
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":235
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 235, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 235, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 235, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 235, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 235, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 235, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 235, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 235, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":236
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 236, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":235
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":234
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":239
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_17ReishauerDressage_11rodasdemuda_lambda2, 0, __pyx_n_s_ReishauerDressage_rodasdemuda_lo, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":240
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":241
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 241, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 241, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":244
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":247
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":248
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__9, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":247
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":250
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # modulo, entradas, modo ou beta
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":212
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.ReishauerDressage.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":254
 * # modulo, entradas, modo ou beta
 * class Pfauter251 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter251'
 * 		self._modelo 		= 'P251'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter251_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter251_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 254, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 254, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Pfauter251.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter251___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter251___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  double __pyx_t_9;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":255
 * class Pfauter251 (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter251'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'P251'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_pfauter251) < 0) __PYX_ERR(0, 255, __pyx_L1_error)

  /* "rodasdemuda.pyx":256
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter251'
 * 		self._modelo 		= 'P251'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_n_s_P251) < 0) __PYX_ERR(0, 256, __pyx_L1_error)

  /* "rodasdemuda.pyx":257
 * 		self._name 			= 'pfauter251'
 * 		self._modelo 		= 'P251'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__10) < 0) __PYX_ERR(0, 257, __pyx_L1_error)

  /* "rodasdemuda.pyx":258
 * 		self._modelo 		= 'P251'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":259
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)             # <<<<<<<<<<<<<<
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_beta, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":260
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))             # <<<<<<<<<<<<<<
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_six2dec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":261
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)             # <<<<<<<<<<<<<<
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_entradas, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_zO, __pyx_t_1) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":262
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()             # <<<<<<<<<<<<<<
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(2.864789*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modo, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modo_2, __pyx_t_1) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":263
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(2.864789*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_DIFERENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":264
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(2.864789*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(2*self._m*self._zO)		#modulo, beta, entradas
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble((2.864789 * sin(__pyx_t_9))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_2) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rodasdemuda.pyx":263
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(2.864789*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":265
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(2.864789*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(3*cos(self._beta))/(2*self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_TANGENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":266
 * 			self._razao =(2.864789*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(2*self._m*self._zO)		#modulo, beta, entradas             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao =3/(2*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((3.0 * cos(__pyx_t_9))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_3) < 0) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":265
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(2.864789*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(3*cos(self._beta))/(2*self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":267
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(2*self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao =3/(2*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_NAVALHAO, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":268
 * 			self._razao =(3*cos(self._beta))/(2*self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao =3/(2*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho             # <<<<<<<<<<<<<<
 * 		else :
 * 			self._razao = None
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Multiply(__pyx_int_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_int_3, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_3) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":267
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(2*self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao =3/(2*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":270
 * 			self._razao =3/(2*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 * 			self._razao = None             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, Py_None) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rodasdemuda.pyx":254
 * # modulo, entradas, modo ou beta
 * class Pfauter251 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter251'
 * 		self._modelo 		= 'P251'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Pfauter251.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":272
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter251_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter251_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 272, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 272, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Pfauter251.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter251_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter251_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_CD;
  long __pyx_v_MIN_AB;
  PyObject *__pyx_v_MIN_CD = NULL;
  long __pyx_v_MAX_D;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":273
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":274
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":273
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":276
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":277
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":278
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":279
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		MAX_AB	=	170			#
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":281
 * 			D = conjunto[3]
 * 
 * 		MAX_AB	=	170			#             # <<<<<<<<<<<<<<
 * 		MAX_CD	=	180			#
 * 		MIN_AB	=	80			#
 */
  __pyx_v_MAX_AB = 0xAA;

  /* "rodasdemuda.pyx":282
 * 
 * 		MAX_AB	=	170			#
 * 		MAX_CD	=	180			#             # <<<<<<<<<<<<<<
 * 		MIN_AB	=	80			#
 * 		MIN_CD	=	B+21 if B>=39 else 60	# C+D >= 60 and C+D>=B+21
 */
  __pyx_v_MAX_CD = 0xB4;

  /* "rodasdemuda.pyx":283
 * 		MAX_AB	=	170			#
 * 		MAX_CD	=	180			#
 * 		MIN_AB	=	80			#             # <<<<<<<<<<<<<<
 * 		MIN_CD	=	B+21 if B>=39 else 60	# C+D >= 60 and C+D>=B+21
 * 		MAX_D	=	127			#
 */
  __pyx_v_MIN_AB = 80;

  /* "rodasdemuda.pyx":284
 * 		MAX_CD	=	180			#
 * 		MIN_AB	=	80			#
 * 		MIN_CD	=	B+21 if B>=39 else 60	# C+D >= 60 and C+D>=B+21             # <<<<<<<<<<<<<<
 * 		MAX_D	=	127			#
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_int_39, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_B, __pyx_int_21, 21, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_60);
    __pyx_t_3 = __pyx_int_60;
  }
  __pyx_v_MIN_CD = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rodasdemuda.pyx":285
 * 		MIN_AB	=	80			#
 * 		MIN_CD	=	B+21 if B>=39 else 60	# C+D >= 60 and C+D>=B+21
 * 		MAX_D	=	127			#             # <<<<<<<<<<<<<<
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and D<=MAX_D:
 */
  __pyx_v_MAX_D = 0x7F;

  /* "rodasdemuda.pyx":287
 * 		MAX_D	=	127			#
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_MIN_CD, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_CD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_MAX_D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_D, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":288
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and D<=MAX_D:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else :
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":287
 * 		MAX_D	=	127			#
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":290
 * 			return True
 * 		else :
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":272
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Pfauter251.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_MIN_CD);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":292
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter251_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter251_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 292, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 292, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Pfauter251.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter251_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":319
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_11rodasdemuda_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter251_11rodasdemuda_lambda3 = {"lambda3", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter251_11rodasdemuda_lambda3, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter251_11rodasdemuda_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Pfauter251.rodasdemuda.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":292
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter251_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":294
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":295
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":298
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":299
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":300
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":301
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":302
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":304
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":306
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":308
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":309
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":310
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":311
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":312
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 312, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 312, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":313
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 313, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 313, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":314
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":315
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 315, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 315, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 315, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 315, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 315, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 315, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 315, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 315, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 315, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":316
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 316, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":315
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":314
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":319
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter251_11rodasdemuda_lambda3, 0, __pyx_n_s_Pfauter251_rodasdemuda_locals_la, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":320
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":321
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 321, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 321, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":324
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":327
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":328
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__12, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":327
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":330
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # modulo, entradas, modo ou beta
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":292
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Pfauter251.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":334
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter630'
 * 		self._modelo 		= 'P630'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 334, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 334, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter630___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  double __pyx_t_9;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":335
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter630'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'P630'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_pfauter630) < 0) __PYX_ERR(0, 335, __pyx_L1_error)

  /* "rodasdemuda.pyx":336
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter630'
 * 		self._modelo 		= 'P630'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_n_s_P630) < 0) __PYX_ERR(0, 336, __pyx_L1_error)

  /* "rodasdemuda.pyx":337
 * 		self._name 			= 'pfauter630'
 * 		self._modelo 		= 'P630'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__13) < 0) __PYX_ERR(0, 337, __pyx_L1_error)

  /* "rodasdemuda.pyx":338
 * 		self._modelo 		= 'P630'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":339
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)             # <<<<<<<<<<<<<<
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_beta, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":340
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))             # <<<<<<<<<<<<<<
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_six2dec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":341
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)             # <<<<<<<<<<<<<<
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_entradas, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_zO, __pyx_t_1) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":342
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()             # <<<<<<<<<<<<<<
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(8.952466*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modo, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modo_2, __pyx_t_1) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":343
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(8.952466*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_DIFERENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":344
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(8.952466*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(self._m*self._zO)			#modulo, beta, entradas, angulo a 0 para navalho
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble((8.952466 * sin(__pyx_t_9))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_2) < 0) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rodasdemuda.pyx":343
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(8.952466*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":345
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(8.952466*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(3*cos(self._beta))/(self._m*self._zO)			#modulo, beta, entradas, angulo a 0 para navalho
 * 		elif self._modo == 'NAVALHAO':
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_TANGENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":346
 * 			self._razao =(8.952466*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(self._m*self._zO)			#modulo, beta, entradas, angulo a 0 para navalho             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao =3/(self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((3.0 * cos(__pyx_t_9))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_1) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rodasdemuda.pyx":345
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao =(8.952466*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao =(3*cos(self._beta))/(self._m*self._zO)			#modulo, beta, entradas, angulo a 0 para navalho
 * 		elif self._modo == 'NAVALHAO':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":347
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(self._m*self._zO)			#modulo, beta, entradas, angulo a 0 para navalho
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao =3/(self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_NAVALHAO, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":348
 * 			self._razao =(3*cos(self._beta))/(self._m*self._zO)			#modulo, beta, entradas, angulo a 0 para navalho
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao =3/(self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho             # <<<<<<<<<<<<<<
 * 		else :
 * 			self._razao = None
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_int_3, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_7) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "rodasdemuda.pyx":347
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao =(3*cos(self._beta))/(self._m*self._zO)			#modulo, beta, entradas, angulo a 0 para navalho
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao =3/(self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":350
 * 			self._razao =3/(self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 * 			self._razao = None             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, Py_None) < 0) __PYX_ERR(0, 350, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rodasdemuda.pyx":334
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter630'
 * 		self._modelo 		= 'P630'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":352
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 352, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter630_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_CD;
  long __pyx_v_MIN_AB;
  PyObject *__pyx_v_MIN_CD = NULL;
  long __pyx_v_MAX_D;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":353
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":354
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":353
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":356
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":357
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":358
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":359
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		MAX_AB	=	107						# 150 nos apontamentos
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":361
 * 			D = conjunto[3]
 * 
 * 		MAX_AB	=	107						# 150 nos apontamentos             # <<<<<<<<<<<<<<
 * 		MAX_CD	=	160						#
 * 		MIN_AB	=	50						#
 */
  __pyx_v_MAX_AB = 0x6B;

  /* "rodasdemuda.pyx":362
 * 
 * 		MAX_AB	=	107						# 150 nos apontamentos
 * 		MAX_CD	=	160						#             # <<<<<<<<<<<<<<
 * 		MIN_AB	=	50						#
 * 		MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31
 */
  __pyx_v_MAX_CD = 0xA0;

  /* "rodasdemuda.pyx":363
 * 		MAX_AB	=	107						# 150 nos apontamentos
 * 		MAX_CD	=	160						#
 * 		MIN_AB	=	50						#             # <<<<<<<<<<<<<<
 * 		MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31
 * 		MAX_D	=	110						#
 */
  __pyx_v_MIN_AB = 50;

  /* "rodasdemuda.pyx":364
 * 		MAX_CD	=	160						#
 * 		MIN_AB	=	50						#
 * 		MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31             # <<<<<<<<<<<<<<
 * 		MAX_D	=	110						#
 * 		#MAX_BC = 145						Existe no programa em PHP esta limitacao
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_int_49, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_B, __pyx_int_31, 31, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_80);
    __pyx_t_3 = __pyx_int_80;
  }
  __pyx_v_MIN_CD = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rodasdemuda.pyx":365
 * 		MIN_AB	=	50						#
 * 		MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31
 * 		MAX_D	=	110						#             # <<<<<<<<<<<<<<
 * 		#MAX_BC = 145						Existe no programa em PHP esta limitacao
 * 
 */
  __pyx_v_MAX_D = 0x6E;

  /* "rodasdemuda.pyx":368
 * 		#MAX_BC = 145						Existe no programa em PHP esta limitacao
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_MIN_CD, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_CD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_MAX_D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_D, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":369
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and D<=MAX_D:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else :
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":368
 * 		#MAX_BC = 145						Existe no programa em PHP esta limitacao
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":371
 * 			return True
 * 		else :
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":352
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_MIN_CD);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":373
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter630_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":400
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda_lambda4(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_11rodasdemuda_lambda4 = {"lambda4", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda_lambda4, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda_lambda4(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda4 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda4(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda4", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.rodasdemuda.lambda4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":373
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":375
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":376
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":379
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":380
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":381
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":382
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":383
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":385
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":387
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":389
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":390
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":391
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":392
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":393
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 393, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 393, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":394
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":395
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":396
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 396, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 396, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 396, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 396, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 396, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 396, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 396, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 396, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 396, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":397
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 397, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":396
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":395
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":400
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_11rodasdemuda_lambda4, 0, __pyx_n_s_Pfauter630_rodasdemuda_locals_la, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":401
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":402
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 402, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 402, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":405
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":408
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":409
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__15, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":408
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":411
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # modulo, entradas, modo ou beta
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":373
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":415
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter2300'
 * 		self._modelo 		= 'P2300'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_7__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_7__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_7__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_7__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 415, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 415, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter630_6__init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_6__init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  double __pyx_t_9;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":416
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter2300'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'P2300'
 * 		self._conj_rodas 	= (20,21,22,23,24,25,26,26,27,28,29,
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_pfauter2300) < 0) __PYX_ERR(0, 416, __pyx_L1_error)

  /* "rodasdemuda.pyx":417
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter2300'
 * 		self._modelo 		= 'P2300'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (20,21,22,23,24,25,26,26,27,28,29,
 * 									30,31,32,33,34,35,36,37,38,39,
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_n_s_P2300) < 0) __PYX_ERR(0, 417, __pyx_L1_error)

  /* "rodasdemuda.pyx":418
 * 		self._name 			= 'pfauter2300'
 * 		self._modelo 		= 'P2300'
 * 		self._conj_rodas 	= (20,21,22,23,24,25,26,26,27,28,29,             # <<<<<<<<<<<<<<
 * 									30,31,32,33,34,35,36,37,38,39,
 * 									40,41,42,43,44,45,46,47,48,49,
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__16) < 0) __PYX_ERR(0, 418, __pyx_L1_error)

  /* "rodasdemuda.pyx":425
 * 									70,71,72,73,74,75,76,77,78,79,
 * 									80,80,82,84,85,85,90,90)
 * 		self._m 				= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":426
 * 									80,80,82,84,85,85,90,90)
 * 		self._m 				= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)             # <<<<<<<<<<<<<<
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO				= kwargs.get('entradas', None)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_beta, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":427
 * 		self._m 				= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))             # <<<<<<<<<<<<<<
 * 		self._zO				= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_six2dec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":428
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO				= kwargs.get('entradas', None)             # <<<<<<<<<<<<<<
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_entradas, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_zO, __pyx_t_1) < 0) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":429
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO				= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()             # <<<<<<<<<<<<<<
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (12.732395*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modo, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modo_2, __pyx_t_1) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":430
 * 		self._zO				= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (12.732395*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_DIFERENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":431
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (12.732395*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (8*cos(self._beta))/(3*self._m*self._zO)			#modulo, beta, entradas
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble((12.732395 * sin(__pyx_t_9))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_2) < 0) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rodasdemuda.pyx":430
 * 		self._zO				= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (12.732395*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":432
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (12.732395*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (8*cos(self._beta))/(3*self._m*self._zO)			#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_TANGENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":433
 * 			self._razao = (12.732395*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (8*cos(self._beta))/(3*self._m*self._zO)			#modulo, beta, entradas             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao = 8/(3*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((8.0 * cos(__pyx_t_9))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Multiply(__pyx_int_3, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_3) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":432
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (12.732395*sin(self._beta))/(self._m*self._zO)	#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (8*cos(self._beta))/(3*self._m*self._zO)			#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":434
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (8*cos(self._beta))/(3*self._m*self._zO)			#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao = 8/(3*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_NAVALHAO, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":435
 * 			self._razao = (8*cos(self._beta))/(3*self._m*self._zO)			#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao = 8/(3*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho             # <<<<<<<<<<<<<<
 * 		else :
 * 			self._razao = None
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Multiply(__pyx_int_3, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_int_8, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_3) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":434
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (8*cos(self._beta))/(3*self._m*self._zO)			#modulo, beta, entradas
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao = 8/(3*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":437
 * 			self._razao = 8/(3*self._m*self._zO)									#modulo, beta, entradas, angulo a 0 para navalho
 * 		else :
 * 			self._razao = None             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, Py_None) < 0) __PYX_ERR(0, 437, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rodasdemuda.pyx":415
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter2300'
 * 		self._modelo 		= 'P2300'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":439
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_9limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_9limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_9limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_9limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 439, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 439, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter630_8limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_8limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_A;
  long __pyx_v_MAX_D;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_CD;
  long __pyx_v_MIN_AB;
  PyObject *__pyx_v_MIN_CD = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":440
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":441
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":440
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":443
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":444
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":445
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":446
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 			MAX_A	=	51
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":448
 * 			D = conjunto[3]
 * 
 * 			MAX_A	=	51             # <<<<<<<<<<<<<<
 * 			MAX_D	=	85
 * 
 */
    __pyx_v_MAX_A = 51;

    /* "rodasdemuda.pyx":449
 * 
 * 			MAX_A	=	51
 * 			MAX_D	=	85             # <<<<<<<<<<<<<<
 * 
 * 			# From P630
 */
    __pyx_v_MAX_D = 85;

    /* "rodasdemuda.pyx":452
 * 
 * 			# From P630
 * 			MAX_AB	=	107             # <<<<<<<<<<<<<<
 * 			MAX_CD	=	160
 * 			MIN_AB	=	50
 */
    __pyx_v_MAX_AB = 0x6B;

    /* "rodasdemuda.pyx":453
 * 			# From P630
 * 			MAX_AB	=	107
 * 			MAX_CD	=	160             # <<<<<<<<<<<<<<
 * 			MIN_AB	=	50
 * 			MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31
 */
    __pyx_v_MAX_CD = 0xA0;

    /* "rodasdemuda.pyx":454
 * 			MAX_AB	=	107
 * 			MAX_CD	=	160
 * 			MIN_AB	=	50             # <<<<<<<<<<<<<<
 * 			MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31
 * 
 */
    __pyx_v_MIN_AB = 50;

    /* "rodasdemuda.pyx":455
 * 			MAX_CD	=	160
 * 			MIN_AB	=	50
 * 			MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31             # <<<<<<<<<<<<<<
 * 
 * 			if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_int_49, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_B, __pyx_int_31, 31, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
    } else {
      __Pyx_INCREF(__pyx_int_80);
      __pyx_t_3 = __pyx_int_80;
    }
    __pyx_v_MIN_CD = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":457
 * 			MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31
 * 
 * 			if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 				return True
 * 			else :
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_MIN_CD, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_CD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_MAX_A); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_A, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_D, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_2) {

      /* "rodasdemuda.pyx":458
 * 
 * 			if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:
 * 				return True             # <<<<<<<<<<<<<<
 * 			else :
 * 				return False
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "rodasdemuda.pyx":457
 * 			MIN_CD	=	B+31 if B>=49 else 80	# C+D >= 80 and C+D>=B+31
 * 
 * 			if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 				return True
 * 			else :
 */
    }

    /* "rodasdemuda.pyx":460
 * 				return True
 * 			else :
 * 				return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;
    }
  }

  /* "rodasdemuda.pyx":439
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_MIN_CD);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":462
 * 				return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_11rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 462, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 462, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Pfauter630_10rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":489
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda_1lambda5(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Pfauter630_11rodasdemuda_1lambda5 = {"lambda5", (PyCFunction)__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda_1lambda5, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Pfauter630_11rodasdemuda_1lambda5(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda5 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda5(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda5(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda5", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.rodasdemuda.lambda5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":462
 * 				return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_10Pfauter630_10rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":464
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":465
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":468
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":469
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":470
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":471
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":472
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":474
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":476
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":478
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":479
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":480
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":481
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":482
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 482, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 482, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":483
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 483, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 483, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":484
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":485
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 485, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 485, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 485, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 485, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 485, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 485, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 485, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 485, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 485, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":486
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 486, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":485
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":484
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":489
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_11rodasdemuda_1lambda5, 0, __pyx_n_s_Pfauter630_rodasdemuda_locals_la, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":490
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":491
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 491, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 491, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 491, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 491, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":494
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":497
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":498
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__18, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":497
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":500
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # modulo, entradas, modo ou beta
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":462
 * 				return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Pfauter630.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":504
 * # modulo, entradas, modo ou beta
 * class Modul (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Modul'
 * 		self._modelo 		= '250x5'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_5Modul_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_5Modul_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_5Modul_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_5Modul_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 504, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 504, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Modul.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_5Modul___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_5Modul___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  double __pyx_t_9;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":505
 * class Modul (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Modul'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= '250x5'
 * 		self._conj_rodas 	= (20,21,22,22,23,24,25,26,26,27,28,29,29,29,30,30,31,32,33,34,35,36,36,37,38,39,40,40,41,42,43,44,45,45,46,47,47,48,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,62,63,64,65,66,67,67,68,69,70,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,94,95,96,97,98,100,101,103,105,109,110,120)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_Modul) < 0) __PYX_ERR(0, 505, __pyx_L1_error)

  /* "rodasdemuda.pyx":506
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Modul'
 * 		self._modelo 		= '250x5'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (20,21,22,22,23,24,25,26,26,27,28,29,29,29,30,30,31,32,33,34,35,36,36,37,38,39,40,40,41,42,43,44,45,45,46,47,47,48,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,62,63,64,65,66,67,67,68,69,70,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,94,95,96,97,98,100,101,103,105,109,110,120)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_kp_s_250x5) < 0) __PYX_ERR(0, 506, __pyx_L1_error)

  /* "rodasdemuda.pyx":507
 * 		self._name 			= 'Modul'
 * 		self._modelo 		= '250x5'
 * 		self._conj_rodas 	= (20,21,22,22,23,24,25,26,26,27,28,29,29,29,30,30,31,32,33,34,35,36,36,37,38,39,40,40,41,42,43,44,45,45,46,47,47,48,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,62,63,64,65,66,67,67,68,69,70,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,94,95,96,97,98,100,101,103,105,109,110,120)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__19) < 0) __PYX_ERR(0, 507, __pyx_L1_error)

  /* "rodasdemuda.pyx":508
 * 		self._modelo 		= '250x5'
 * 		self._conj_rodas 	= (20,21,22,22,23,24,25,26,26,27,28,29,29,29,30,30,31,32,33,34,35,36,36,37,38,39,40,40,41,42,43,44,45,45,46,47,47,48,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,62,63,64,65,66,67,67,68,69,70,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,94,95,96,97,98,100,101,103,105,109,110,120)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":509
 * 		self._conj_rodas 	= (20,21,22,22,23,24,25,26,26,27,28,29,29,29,30,30,31,32,33,34,35,36,36,37,38,39,40,40,41,42,43,44,45,45,46,47,47,48,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,62,63,64,65,66,67,67,68,69,70,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,94,95,96,97,98,100,101,103,105,109,110,120)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)             # <<<<<<<<<<<<<<
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_beta, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":510
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))             # <<<<<<<<<<<<<<
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_six2dec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_beta_2, __pyx_t_1) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":511
 * 		self._beta 			= kwargs.get('beta', 0)
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)             # <<<<<<<<<<<<<<
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_entradas, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_zO, __pyx_t_1) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":512
 * 		self._beta 			= radians(six2dec(self._beta))
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()             # <<<<<<<<<<<<<<
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (6*sin(self._beta*pi/180))/(self._m*self._zO)		#modulo, beta, entradas
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modo, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modo_2, __pyx_t_1) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":513
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (6*sin(self._beta*pi/180))/(self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_DIFERENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":514
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (6*sin(self._beta*pi/180))/(self._m*self._zO)		#modulo, beta, entradas             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (3*cos(self._beta*pi/180))/(self._m*self._zO)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_pi); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_int_180); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble((6.0 * sin(__pyx_t_9))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_1) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rodasdemuda.pyx":513
 * 		self._zO			= kwargs.get('entradas', None)
 * 		self._modo 			= str(kwargs.get('modo', None)).upper()
 * 		if self._modo == 'DIFERENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (6*sin(self._beta*pi/180))/(self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":515
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (6*sin(self._beta*pi/180))/(self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (3*cos(self._beta*pi/180))/(self._m*self._zO)
 * 		elif self._modo == 'NAVALHAO':
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_TANGENCIAL, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":516
 * 			self._razao = (6*sin(self._beta*pi/180))/(self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (3*cos(self._beta*pi/180))/(self._m*self._zO)             # <<<<<<<<<<<<<<
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao = 3/(self._m*self._zO)								#modulo, entradas
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_beta_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_int_180); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble((3.0 * cos(__pyx_t_9))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_1) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rodasdemuda.pyx":515
 * 		if self._modo == 'DIFERENCIAL':
 * 			self._razao = (6*sin(self._beta*pi/180))/(self._m*self._zO)		#modulo, beta, entradas
 * 		elif self._modo == 'TANGENCIAL':             # <<<<<<<<<<<<<<
 * 			self._razao = (3*cos(self._beta*pi/180))/(self._m*self._zO)
 * 		elif self._modo == 'NAVALHAO':
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":517
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (3*cos(self._beta*pi/180))/(self._m*self._zO)
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao = 3/(self._m*self._zO)								#modulo, entradas
 * 		else :
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_modo_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_NAVALHAO, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "rodasdemuda.pyx":518
 * 			self._razao = (3*cos(self._beta*pi/180))/(self._m*self._zO)
 * 		elif self._modo == 'NAVALHAO':
 * 			self._razao = 3/(self._m*self._zO)								#modulo, entradas             # <<<<<<<<<<<<<<
 * 		else :
 * 			self._razao = None
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_int_3, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_2) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rodasdemuda.pyx":517
 * 		elif self._modo == 'TANGENCIAL':
 * 			self._razao = (3*cos(self._beta*pi/180))/(self._m*self._zO)
 * 		elif self._modo == 'NAVALHAO':             # <<<<<<<<<<<<<<
 * 			self._razao = 3/(self._m*self._zO)								#modulo, entradas
 * 		else :
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":520
 * 			self._razao = 3/(self._m*self._zO)								#modulo, entradas
 * 		else :
 * 			self._razao = None             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, Py_None) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rodasdemuda.pyx":504
 * # modulo, entradas, modo ou beta
 * class Modul (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Modul'
 * 		self._modelo 		= '250x5'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Modul.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":522
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_5Modul_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_5Modul_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_5Modul_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_5Modul_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 522, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 522, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Modul.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_5Modul_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_5Modul_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_AB;
  long __pyx_v_MIN_AB;
  long __pyx_v_MAX_CD;
  PyObject *__pyx_v_MIN_CD = NULL;
  long __pyx_v_MAX_A;
  long __pyx_v_MAX_D;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":523
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":524
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":523
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":526
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":527
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":528
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":529
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		# existe a possibilidade de colocar as rodas de muda em "linha" ou introduzir uma ou duas rodas intermediarias
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":534
 * 		# nestas situacoes os limites sao diferentes e apenas podem ser confirmados graficamente
 * 		# Neste caso desprezo as situacoes anteriores tentando colocar limites o maas universais possiveis
 * 		MAX_AB	=	194             # <<<<<<<<<<<<<<
 * 		MIN_AB	=	77
 * 		MAX_CD	=	200						# para permitir uma roda intermediaria
 */
  __pyx_v_MAX_AB = 0xC2;

  /* "rodasdemuda.pyx":535
 * 		# Neste caso desprezo as situacoes anteriores tentando colocar limites o maas universais possiveis
 * 		MAX_AB	=	194
 * 		MIN_AB	=	77             # <<<<<<<<<<<<<<
 * 		MAX_CD	=	200						# para permitir uma roda intermediaria
 * 		MIN_CD	=	B+24 if B>=46 else 70 	# C+D >= 70 and C+D>=B+24
 */
  __pyx_v_MIN_AB = 77;

  /* "rodasdemuda.pyx":536
 * 		MAX_AB	=	194
 * 		MIN_AB	=	77
 * 		MAX_CD	=	200						# para permitir uma roda intermediaria             # <<<<<<<<<<<<<<
 * 		MIN_CD	=	B+24 if B>=46 else 70 	# C+D >= 70 and C+D>=B+24
 * 		MAX_A	=	100
 */
  __pyx_v_MAX_CD = 0xC8;

  /* "rodasdemuda.pyx":537
 * 		MIN_AB	=	77
 * 		MAX_CD	=	200						# para permitir uma roda intermediaria
 * 		MIN_CD	=	B+24 if B>=46 else 70 	# C+D >= 70 and C+D>=B+24             # <<<<<<<<<<<<<<
 * 		MAX_A	=	100
 * 		MAX_D	=	120
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_int_46, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_B, __pyx_int_24, 24, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_70);
    __pyx_t_3 = __pyx_int_70;
  }
  __pyx_v_MIN_CD = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rodasdemuda.pyx":538
 * 		MAX_CD	=	200						# para permitir uma roda intermediaria
 * 		MIN_CD	=	B+24 if B>=46 else 70 	# C+D >= 70 and C+D>=B+24
 * 		MAX_A	=	100             # <<<<<<<<<<<<<<
 * 		MAX_D	=	120
 * 
 */
  __pyx_v_MAX_A = 0x64;

  /* "rodasdemuda.pyx":539
 * 		MIN_CD	=	B+24 if B>=46 else 70 	# C+D >= 70 and C+D>=B+24
 * 		MAX_A	=	100
 * 		MAX_D	=	120             # <<<<<<<<<<<<<<
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:
 */
  __pyx_v_MAX_D = 0x78;

  /* "rodasdemuda.pyx":541
 * 		MAX_D	=	120
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_MIN_CD, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_CD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_MAX_A); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_A, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_D, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":542
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else :
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":541
 * 		MAX_D	=	120
 * 
 * 		if A+B>=MIN_AB and A+B<=MAX_AB and C+D>=MIN_CD and C+D<=MAX_CD and A<=MAX_A and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":544
 * 			return True
 * 		else :
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":522
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Modul.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_MIN_CD);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":546
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_5Modul_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_5Modul_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_5Modul_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_5Modul_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 546, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 546, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Modul.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_5Modul_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":573
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_5Modul_11rodasdemuda_lambda6(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_5Modul_11rodasdemuda_lambda6 = {"lambda6", (PyCFunction)__pyx_pw_11rodasdemuda_5Modul_11rodasdemuda_lambda6, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_5Modul_11rodasdemuda_lambda6(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda6 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda6(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda6(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda6", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Modul.rodasdemuda.lambda6", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":546
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_5Modul_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":548
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":549
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":552
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":553
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":554
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":555
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":556
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":558
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":560
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":562
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":563
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":564
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":565
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":566
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 566, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 566, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":567
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 567, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 567, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":568
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":569
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 569, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 569, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 569, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 569, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 569, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 569, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 569, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 569, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 569, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":570
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 570, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":569
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":568
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":573
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_5Modul_11rodasdemuda_lambda6, 0, __pyx_n_s_Modul_rodasdemuda_locals_lambda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":574
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":575
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 575, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 575, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":578
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":581
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":582
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__21, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":581
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":584
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # Modulo e entradas
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":546
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Modul.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":588
 * # Modulo e entradas
 * class Lindner (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Lindner'
 * 		self._modelo 		= 'LINDNER'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Lindner_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_7Lindner_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 588, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 588, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Lindner.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Lindner___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_7Lindner___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":589
 * class Lindner (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Lindner'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'LINDNER'
 * 		self._conj_rodas	= (24,27,30,30,32,33,34,36,39,40,42,45,45,47,48,48,51,52,54,58,60,60,60,63,65,65,66,68,70,70,70,72,75,75,76,80,86,90,90,91,94,95,96,100,104,110,120,120,127)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_Lindner) < 0) __PYX_ERR(0, 589, __pyx_L1_error)

  /* "rodasdemuda.pyx":590
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Lindner'
 * 		self._modelo 		= 'LINDNER'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas	= (24,27,30,30,32,33,34,36,39,40,42,45,45,47,48,48,51,52,54,58,60,60,60,63,65,65,66,68,70,70,70,72,75,75,76,80,86,90,90,91,94,95,96,100,104,110,120,120,127)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_n_s_LINDNER) < 0) __PYX_ERR(0, 590, __pyx_L1_error)

  /* "rodasdemuda.pyx":591
 * 		self._name 			= 'Lindner'
 * 		self._modelo 		= 'LINDNER'
 * 		self._conj_rodas	= (24,27,30,30,32,33,34,36,39,40,42,45,45,47,48,48,51,52,54,58,60,60,60,63,65,65,66,68,70,70,70,72,75,75,76,80,86,90,90,91,94,95,96,100,104,110,120,120,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__22) < 0) __PYX_ERR(0, 591, __pyx_L1_error)

  /* "rodasdemuda.pyx":592
 * 		self._modelo 		= 'LINDNER'
 * 		self._conj_rodas	= (24,27,30,30,32,33,34,36,39,40,42,45,45,47,48,48,51,52,54,58,60,60,60,63,65,65,66,68,70,70,70,72,75,75,76,80,86,90,90,91,94,95,96,100,104,110,120,120,127)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m<=2:
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":593
 * 		self._conj_rodas	= (24,27,30,30,32,33,34,36,39,40,42,45,45,47,48,48,51,52,54,58,60,60,60,63,65,65,66,68,70,70,70,72,75,75,76,80,86,90,90,91,94,95,96,100,104,110,120,120,127)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)             # <<<<<<<<<<<<<<
 * 		if self._m<=2:
 * 			self._razao = 6*pi/25.4*self._m*self._zO
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_entradas, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_zO, __pyx_t_1) < 0) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":594
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m<=2:             # <<<<<<<<<<<<<<
 * 			self._razao = 6*pi/25.4*self._m*self._zO
 * 		else :
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rodasdemuda.pyx":595
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m<=2:
 * 			self._razao = 6*pi/25.4*self._m*self._zO             # <<<<<<<<<<<<<<
 * 		else :
 * 			self._razao = (6*pi)/(25.4*12)*self._m*self._zO
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Multiply(__pyx_int_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_25_4, 25.4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_2) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rodasdemuda.pyx":594
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m<=2:             # <<<<<<<<<<<<<<
 * 			self._razao = 6*pi/25.4*self._m*self._zO
 * 		else :
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":597
 * 			self._razao = 6*pi/25.4*self._m*self._zO
 * 		else :
 * 			self._razao = (6*pi)/(25.4*12)*self._m*self._zO             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Multiply(__pyx_int_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((25.4 * 12.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_4) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "rodasdemuda.pyx":588
 * # Modulo e entradas
 * class Lindner (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Lindner'
 * 		self._modelo 		= 'LINDNER'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rodasdemuda.Lindner.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":599
 * 			self._razao = (6*pi)/(25.4*12)*self._m*self._zO
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Lindner_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_7Lindner_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 599, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 599, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Lindner.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Lindner_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_7Lindner_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MAX_A;
  long __pyx_v_MAX_B;
  long __pyx_v_MAX_D;
  long __pyx_v_MAX_AB;
  PyObject *__pyx_v_MIN_CD = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":600
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":601
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":600
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":603
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":604
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":605
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":606
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		MAX_A	=	100
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":608
 * 			D = conjunto[3]
 * 
 * 		MAX_A	=	100             # <<<<<<<<<<<<<<
 * 		MAX_B	=	100
 * 		MAX_D	=	120
 */
  __pyx_v_MAX_A = 0x64;

  /* "rodasdemuda.pyx":609
 * 
 * 		MAX_A	=	100
 * 		MAX_B	=	100             # <<<<<<<<<<<<<<
 * 		MAX_D	=	120
 * 		MAX_AB	=	194
 */
  __pyx_v_MAX_B = 0x64;

  /* "rodasdemuda.pyx":610
 * 		MAX_A	=	100
 * 		MAX_B	=	100
 * 		MAX_D	=	120             # <<<<<<<<<<<<<<
 * 		MAX_AB	=	194
 * 		MIN_CD	=	B+33 if B>=27 else 60 	# C+D >= 60 and C+D>=B+33
 */
  __pyx_v_MAX_D = 0x78;

  /* "rodasdemuda.pyx":611
 * 		MAX_B	=	100
 * 		MAX_D	=	120
 * 		MAX_AB	=	194             # <<<<<<<<<<<<<<
 * 		MIN_CD	=	B+33 if B>=27 else 60 	# C+D >= 60 and C+D>=B+33
 * 
 */
  __pyx_v_MAX_AB = 0xC2;

  /* "rodasdemuda.pyx":612
 * 		MAX_D	=	120
 * 		MAX_AB	=	194
 * 		MIN_CD	=	B+33 if B>=27 else 60 	# C+D >= 60 and C+D>=B+33             # <<<<<<<<<<<<<<
 * 
 * 		if A+B<=MAX_AB and C+D>=MIN_CD and A<=MAX_A and B<=MAX_B and D<=MAX_D:
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_int_27, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 612, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_B, __pyx_int_33, 33, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_60);
    __pyx_t_3 = __pyx_int_60;
  }
  __pyx_v_MIN_CD = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rodasdemuda.pyx":614
 * 		MIN_CD	=	B+33 if B>=27 else 60 	# C+D >= 60 and C+D>=B+33
 * 
 * 		if A+B<=MAX_AB and C+D>=MIN_CD and A<=MAX_A and B<=MAX_B and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_v_MIN_CD, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_A); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_A, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_MAX_B); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_B, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_D, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":615
 * 
 * 		if A+B<=MAX_AB and C+D>=MIN_CD and A<=MAX_A and B<=MAX_B and D<=MAX_D:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else :
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":614
 * 		MIN_CD	=	B+33 if B>=27 else 60 	# C+D >= 60 and C+D>=B+33
 * 
 * 		if A+B<=MAX_AB and C+D>=MIN_CD and A<=MAX_A and B<=MAX_B and D<=MAX_D:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":617
 * 			return True
 * 		else :
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":599
 * 			self._razao = (6*pi)/(25.4*12)*self._m*self._zO
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Lindner.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_MIN_CD);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":619
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Lindner_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_7Lindner_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 619, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Lindner.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Lindner_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":646
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_11rodasdemuda_lambda7(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Lindner_11rodasdemuda_lambda7 = {"lambda7", (PyCFunction)__pyx_pw_11rodasdemuda_7Lindner_11rodasdemuda_lambda7, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Lindner_11rodasdemuda_lambda7(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda7 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda7(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda7", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Lindner.rodasdemuda.lambda7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":619
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_7Lindner_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":621
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":622
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":625
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":626
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":627
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":628
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":629
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":631
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":633
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":635
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":636
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":637
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":638
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":639
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 639, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 639, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":640
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":641
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":642
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 642, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":643
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":642
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":641
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":646
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Lindner_11rodasdemuda_lambda7, 0, __pyx_n_s_Lindner_rodasdemuda_locals_lambd, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":647
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":648
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 648, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 648, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":651
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":654
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":655
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__24, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":654
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":657
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # Modulo e entradas
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":619
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Lindner.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":661
 * # Modulo e entradas
 * class Heckert (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Heckert'
 * 		self._modelo 		= 'Heckert ZFWG 250'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Heckert_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_7Heckert_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 661, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 661, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Heckert.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Heckert___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_7Heckert___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":662
 * class Heckert (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Heckert'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'Heckert ZFWG 250'
 * 		self._conj_rodas	= (20,20,21,22,24,25,27,30,34,35,36,38,40,44,45,46,46,47,48,50,51,52,54,55,56,58,60,62,65,68,70,75,80,85,90,95,100,120,127)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_Heckert) < 0) __PYX_ERR(0, 662, __pyx_L1_error)

  /* "rodasdemuda.pyx":663
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Heckert'
 * 		self._modelo 		= 'Heckert ZFWG 250'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas	= (20,20,21,22,24,25,27,30,34,35,36,38,40,44,45,46,46,47,48,50,51,52,54,55,56,58,60,62,65,68,70,75,80,85,90,95,100,120,127)
 * 		self._m 			= kwargs.get('modulo', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_kp_s_Heckert_ZFWG_250) < 0) __PYX_ERR(0, 663, __pyx_L1_error)

  /* "rodasdemuda.pyx":664
 * 		self._name 			= 'Heckert'
 * 		self._modelo 		= 'Heckert ZFWG 250'
 * 		self._conj_rodas	= (20,20,21,22,24,25,27,30,34,35,36,38,40,44,45,46,46,47,48,50,51,52,54,55,56,58,60,62,65,68,70,75,80,85,90,95,100,120,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__25) < 0) __PYX_ERR(0, 664, __pyx_L1_error)

  /* "rodasdemuda.pyx":665
 * 		self._modelo 		= 'Heckert ZFWG 250'
 * 		self._conj_rodas	= (20,20,21,22,24,25,27,30,34,35,36,38,40,44,45,46,46,47,48,50,51,52,54,55,56,58,60,62,65,68,70,75,80,85,90,95,100,120,127)
 * 		self._m 			= kwargs.get('modulo', None)             # <<<<<<<<<<<<<<
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m*pi<=40:
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_modulo, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_m, __pyx_t_1) < 0) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":666
 * 		self._conj_rodas	= (20,20,21,22,24,25,27,30,34,35,36,38,40,44,45,46,46,47,48,50,51,52,54,55,56,58,60,62,65,68,70,75,80,85,90,95,100,120,127)
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)             # <<<<<<<<<<<<<<
 * 		if self._m*pi<=40:
 * 			self._razao = (self._m*self._zO*47)/(6*95)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_entradas, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_zO, __pyx_t_1) < 0) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":667
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m*pi<=40:             # <<<<<<<<<<<<<<
 * 			self._razao = (self._m*self._zO*47)/(6*95)
 * 		else :
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_40, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "rodasdemuda.pyx":668
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m*pi<=40:
 * 			self._razao = (self._m*self._zO*47)/(6*95)             # <<<<<<<<<<<<<<
 * 		else :
 * 			self._razao = (self._m*self._zO*47)/(40*95)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_int_47); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_570); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_1) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rodasdemuda.pyx":667
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 * 		if self._m*pi<=40:             # <<<<<<<<<<<<<<
 * 			self._razao = (self._m*self._zO*47)/(6*95)
 * 		else :
 */
    goto __pyx_L3;
  }

  /* "rodasdemuda.pyx":670
 * 			self._razao = (self._m*self._zO*47)/(6*95)
 * 		else :
 * 			self._razao = (self._m*self._zO*47)/(40*95)             # <<<<<<<<<<<<<<
 * 
 * 	def limites(self, *conjunto):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_zO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_int_47); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_3800); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_2) < 0) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "rodasdemuda.pyx":661
 * # Modulo e entradas
 * class Heckert (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Heckert'
 * 		self._modelo 		= 'Heckert ZFWG 250'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rodasdemuda.Heckert.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":672
 * 			self._razao = (self._m*self._zO*47)/(40*95)
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Heckert_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_7Heckert_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 672, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 672, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Heckert.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Heckert_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_7Heckert_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_D = NULL;
  long __pyx_v_MIN_AB;
  long __pyx_v_MIN_CD;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_CD;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":673
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 673, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":674
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":673
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 4:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":676
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":677
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":678
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":679
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 
 * 		MIN_AB	=	90			# Original: 78
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":681
 * 			D = conjunto[3]
 * 
 * 		MIN_AB	=	90			# Original: 78             # <<<<<<<<<<<<<<
 * 		MIN_CD	=	90			# Original: 88
 * 		MAX_AB	=	200			# Original: 120
 */
  __pyx_v_MIN_AB = 90;

  /* "rodasdemuda.pyx":682
 * 
 * 		MIN_AB	=	90			# Original: 78
 * 		MIN_CD	=	90			# Original: 88             # <<<<<<<<<<<<<<
 * 		MAX_AB	=	200			# Original: 120
 * 		MAX_CD	=	200			# Original: 135
 */
  __pyx_v_MIN_CD = 90;

  /* "rodasdemuda.pyx":683
 * 		MIN_AB	=	90			# Original: 78
 * 		MIN_CD	=	90			# Original: 88
 * 		MAX_AB	=	200			# Original: 120             # <<<<<<<<<<<<<<
 * 		MAX_CD	=	200			# Original: 135
 * 
 */
  __pyx_v_MAX_AB = 0xC8;

  /* "rodasdemuda.pyx":684
 * 		MIN_CD	=	90			# Original: 88
 * 		MAX_AB	=	200			# Original: 120
 * 		MAX_CD	=	200			# Original: 135             # <<<<<<<<<<<<<<
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB  and C+D>=MIN_CD:
 */
  __pyx_v_MAX_CD = 0xC8;

  /* "rodasdemuda.pyx":686
 * 		MAX_CD	=	200			# Original: 135
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB  and C+D>=MIN_CD:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_C, __pyx_v_D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_CD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":687
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB  and C+D>=MIN_CD:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else :
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":686
 * 		MAX_CD	=	200			# Original: 135
 * 
 * 		if A+B<=MAX_AB and C+D<=MAX_CD and A+B>=MIN_AB  and C+D>=MIN_CD:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":689
 * 			return True
 * 		else :
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":672
 * 			self._razao = (self._m*self._zO*47)/(40*95)
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Heckert.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":691
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Heckert_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_7Heckert_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 691, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 691, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 691, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Heckert.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_7Heckert_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":718
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_11rodasdemuda_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_7Heckert_11rodasdemuda_lambda8 = {"lambda8", (PyCFunction)__pyx_pw_11rodasdemuda_7Heckert_11rodasdemuda_lambda8, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_7Heckert_11rodasdemuda_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda8 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda8(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lambda8", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Heckert.rodasdemuda.lambda8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":691
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_7Heckert_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":693
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":694
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":697
 * 
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":698
 * 		cdef int lrodas, a, b, c, d
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":699
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":700
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":701
 * 		c = 0
 * 		d = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":703
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":705
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":707
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":708
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":709
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":710
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":711
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 711, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_c]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_d]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 711, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":712
 * 					for d from 0 <= d < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":713
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_c) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_d) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_c != __pyx_v_d) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":714
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 714, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 714, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 714, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 714, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 714, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[5] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 4+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 714, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(4+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 714, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 714, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 714, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":715
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_t_11) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_t_11) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 715, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":714
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":713
 * 						razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], rodas[c], rodas[d]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":718
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Heckert_11rodasdemuda_lambda8, 0, __pyx_n_s_Heckert_rodasdemuda_locals_lambd, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":719
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":720
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 720, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 720, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 720, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 720, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":723
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":726
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":727
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__27, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":726
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":729
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * # modulo, entradas, modo ou beta
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":691
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Heckert.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":733
 * # modulo, entradas, modo ou beta
 * class Spiromatic (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Spiromatic'
 * 		self._modelo 		= 'Spiromatic'
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Spiromatic_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11rodasdemuda_10Spiromatic_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 733, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 733, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Spiromatic___init__(__pyx_self, __pyx_v_self, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rodasdemuda.pyx":734
 * class Spiromatic (object):
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Spiromatic'             # <<<<<<<<<<<<<<
 * 		self._modelo 		= 'Spiromatic'
 * 		self._conj_rodas 	= (31,37,40,41,44,45,47,48,49,50,51,52,53,54,56,57,58,60,61,62,64,66,68,69,72,73,76,78,79,80,80,81,83,89)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name, __pyx_n_s_Spiromatic) < 0) __PYX_ERR(0, 734, __pyx_L1_error)

  /* "rodasdemuda.pyx":735
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Spiromatic'
 * 		self._modelo 		= 'Spiromatic'             # <<<<<<<<<<<<<<
 * 		self._conj_rodas 	= (31,37,40,41,44,45,47,48,49,50,51,52,53,54,56,57,58,60,61,62,64,66,68,69,72,73,76,78,79,80,80,81,83,89)
 * 		self._w 			= kwargs.get('w', None)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_modelo, __pyx_n_s_Spiromatic) < 0) __PYX_ERR(0, 735, __pyx_L1_error)

  /* "rodasdemuda.pyx":736
 * 		self._name 			= 'Spiromatic'
 * 		self._modelo 		= 'Spiromatic'
 * 		self._conj_rodas 	= (31,37,40,41,44,45,47,48,49,50,51,52,53,54,56,57,58,60,61,62,64,66,68,69,72,73,76,78,79,80,80,81,83,89)             # <<<<<<<<<<<<<<
 * 		self._w 			= kwargs.get('w', None)
 * 		self._razao 		= self._w
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas, __pyx_tuple__28) < 0) __PYX_ERR(0, 736, __pyx_L1_error)

  /* "rodasdemuda.pyx":737
 * 		self._modelo 		= 'Spiromatic'
 * 		self._conj_rodas 	= (31,37,40,41,44,45,47,48,49,50,51,52,53,54,56,57,58,60,61,62,64,66,68,69,72,73,76,78,79,80,80,81,83,89)
 * 		self._w 			= kwargs.get('w', None)             # <<<<<<<<<<<<<<
 * 		self._razao 		= self._w
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_s_w, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_w_2, __pyx_t_1) < 0) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":738
 * 		self._conj_rodas 	= (31,37,40,41,44,45,47,48,49,50,51,52,53,54,56,57,58,60,61,62,64,66,68,69,72,73,76,78,79,80,80,81,83,89)
 * 		self._w 			= kwargs.get('w', None)
 * 		self._razao 		= self._w             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_w_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_razao, __pyx_t_1) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":733
 * # modulo, entradas, modo ou beta
 * class Spiromatic (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Spiromatic'
 * 		self._modelo 		= 'Spiromatic'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":741
 * 
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 6:
 * 			return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Spiromatic_3limites = {"limites", (PyCFunction)__pyx_pw_11rodasdemuda_10Spiromatic_3limites, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_3limites(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_conjunto = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limites (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_conjunto = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_conjunto)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_conjunto);
  } else {
    __pyx_v_conjunto = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "limites") < 0)) __PYX_ERR(0, 741, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("limites", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 741, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_conjunto); __pyx_v_conjunto = 0;
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Spiromatic_2limites(__pyx_self, __pyx_v_self, __pyx_v_conjunto);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conjunto);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic_2limites(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_conjunto) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_C = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_D = NULL;
  PyObject *__pyx_v_E = NULL;
  PyObject *__pyx_v_F = NULL;
  long __pyx_v_MAX_A;
  long __pyx_v_MAX_F;
  long __pyx_v_MIN_AB;
  long __pyx_v_MIN_EF;
  long __pyx_v_MAX_AB;
  long __pyx_v_MAX_EF;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("limites", 0);

  /* "rodasdemuda.pyx":742
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 6:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_conjunto); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 742, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 6) != 0);
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":743
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 6:
 * 			return None             # <<<<<<<<<<<<<<
 * 		else :
 * 			A = conjunto[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":742
 * 
 * 	def limites(self, *conjunto):
 * 		if len(conjunto) != 6:             # <<<<<<<<<<<<<<
 * 			return None
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":745
 * 			return None
 * 		else :
 * 			A = conjunto[0]             # <<<<<<<<<<<<<<
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_A = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":746
 * 		else :
 * 			A = conjunto[0]
 * 			B = conjunto[1]             # <<<<<<<<<<<<<<
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_B = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":747
 * 			A = conjunto[0]
 * 			B = conjunto[1]
 * 			C = conjunto[2]             # <<<<<<<<<<<<<<
 * 			D = conjunto[3]
 * 			E = conjunto[4]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_C = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":748
 * 			B = conjunto[1]
 * 			C = conjunto[2]
 * 			D = conjunto[3]             # <<<<<<<<<<<<<<
 * 			E = conjunto[4]
 * 			F = conjunto[5]
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":749
 * 			C = conjunto[2]
 * 			D = conjunto[3]
 * 			E = conjunto[4]             # <<<<<<<<<<<<<<
 * 			F = conjunto[5]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_E = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rodasdemuda.pyx":750
 * 			D = conjunto[3]
 * 			E = conjunto[4]
 * 			F = conjunto[5]             # <<<<<<<<<<<<<<
 * 
 * 		MAX_A	=	80
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_conjunto, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_F = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "rodasdemuda.pyx":752
 * 			F = conjunto[5]
 * 
 * 		MAX_A	=	80             # <<<<<<<<<<<<<<
 * 		MAX_F	=	83
 * 		MIN_AB	=	68
 */
  __pyx_v_MAX_A = 80;

  /* "rodasdemuda.pyx":753
 * 
 * 		MAX_A	=	80
 * 		MAX_F	=	83             # <<<<<<<<<<<<<<
 * 		MIN_AB	=	68
 * 		MIN_EF	=	68
 */
  __pyx_v_MAX_F = 83;

  /* "rodasdemuda.pyx":754
 * 		MAX_A	=	80
 * 		MAX_F	=	83
 * 		MIN_AB	=	68             # <<<<<<<<<<<<<<
 * 		MIN_EF	=	68
 * 		MAX_AB	=	156
 */
  __pyx_v_MIN_AB = 68;

  /* "rodasdemuda.pyx":755
 * 		MAX_F	=	83
 * 		MIN_AB	=	68
 * 		MIN_EF	=	68             # <<<<<<<<<<<<<<
 * 		MAX_AB	=	156
 * 		MAX_EF	=	156
 */
  __pyx_v_MIN_EF = 68;

  /* "rodasdemuda.pyx":756
 * 		MIN_AB	=	68
 * 		MIN_EF	=	68
 * 		MAX_AB	=	156             # <<<<<<<<<<<<<<
 * 		MAX_EF	=	156
 * 
 */
  __pyx_v_MAX_AB = 0x9C;

  /* "rodasdemuda.pyx":757
 * 		MIN_EF	=	68
 * 		MAX_AB	=	156
 * 		MAX_EF	=	156             # <<<<<<<<<<<<<<
 * 
 * 		if A+B>=MIN_AB and E+F>=MIN_EF and A<=MAX_A and F<=MAX_F and A+B<=MAX_AB and E+F<=MAX_EF:
 */
  __pyx_v_MAX_EF = 0x9C;

  /* "rodasdemuda.pyx":759
 * 		MAX_EF	=	156
 * 
 * 		if A+B>=MIN_AB and E+F>=MIN_EF and A<=MAX_A and F<=MAX_F and A+B<=MAX_AB and E+F<=MAX_EF:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_E, __pyx_v_F); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MIN_EF); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_MAX_A); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_A, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_F); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_F, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyNumber_Add(__pyx_v_A, __pyx_v_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_AB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyNumber_Add(__pyx_v_E, __pyx_v_F); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_MAX_EF); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rodasdemuda.pyx":760
 * 
 * 		if A+B>=MIN_AB and E+F>=MIN_EF and A<=MAX_A and F<=MAX_F and A+B<=MAX_AB and E+F<=MAX_EF:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else :
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "rodasdemuda.pyx":759
 * 		MAX_EF	=	156
 * 
 * 		if A+B>=MIN_AB and E+F>=MIN_EF and A<=MAX_A and F<=MAX_F and A+B<=MAX_AB and E+F<=MAX_EF:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else :
 */
  }

  /* "rodasdemuda.pyx":762
 * 			return True
 * 		else :
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda(self, float erro = 0.001):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "rodasdemuda.pyx":741
 * 
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 6:
 * 			return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.limites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_E);
  __Pyx_XDECREF(__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":764
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Spiromatic_5rodasdemuda = {"rodasdemuda", (PyCFunction)__pyx_pw_11rodasdemuda_10Spiromatic_5rodasdemuda, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_5rodasdemuda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda") < 0)) __PYX_ERR(0, 764, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 764, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 764, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Spiromatic_4rodasdemuda(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":791
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_11rodasdemuda_lambda9(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Spiromatic_11rodasdemuda_lambda9 = {"lambda9", (PyCFunction)__pyx_pw_11rodasdemuda_10Spiromatic_11rodasdemuda_lambda9, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_11rodasdemuda_lambda9(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda9 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda9(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda9(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("lambda9", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_E); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_F); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.rodasdemuda.lambda9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":764
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic_4rodasdemuda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_e;
  int __pyx_v_f;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda", 0);

  /* "rodasdemuda.pyx":766
 * 	def rodasdemuda(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":767
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, e, f
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":770
 * 
 * 		cdef int lrodas, a, b, e, f
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		e = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":771
 * 		cdef int lrodas, a, b, e, f
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		e = 0
 * 		f = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":772
 * 		a = 0
 * 		b = 0
 * 		e = 0             # <<<<<<<<<<<<<<
 * 		f = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_e = 0;

  /* "rodasdemuda.pyx":773
 * 		b = 0
 * 		e = 0
 * 		f = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_f = 0;

  /* "rodasdemuda.pyx":774
 * 		e = 0
 * 		f = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":776
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":778
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":780
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for e from 0 <= e < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":781
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for e from 0 <= e < lrodas:
 * 					for f from 0 <= f < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":782
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for e from 0 <= e < lrodas:             # <<<<<<<<<<<<<<
 * 					for f from 0 <= f < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[e]/rodas[f]
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_e = 0; __pyx_v_e < __pyx_t_6; __pyx_v_e++) {

        /* "rodasdemuda.pyx":783
 * 			for b from 0 <= b < lrodas:
 * 				for e from 0 <= e < lrodas:
 * 					for f from 0 <= f < lrodas:             # <<<<<<<<<<<<<<
 * 						razaom=rodas[a]/rodas[b]*rodas[e]/rodas[f]
 * 						err = fabs (self._razao - razaom)
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_f = 0; __pyx_v_f < __pyx_t_7; __pyx_v_f++) {

          /* "rodasdemuda.pyx":784
 * 				for e from 0 <= e < lrodas:
 * 					for f from 0 <= f < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[e]/rodas[f]             # <<<<<<<<<<<<<<
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=e and a!=f and b!=e and b!=f and e!=f):
 */
          __pyx_t_8 = (__pyx_v_rodas[__pyx_v_a]);
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_b]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 784, __pyx_L1_error)
          }
          __pyx_t_10 = ((__pyx_t_8 / __pyx_t_9) * (__pyx_v_rodas[__pyx_v_e]));
          __pyx_t_9 = (__pyx_v_rodas[__pyx_v_f]);
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 784, __pyx_L1_error)
          }
          __pyx_v_razaom = (__pyx_t_10 / __pyx_t_9);

          /* "rodasdemuda.pyx":785
 * 					for f from 0 <= f < lrodas:
 * 						razaom=rodas[a]/rodas[b]*rodas[e]/rodas[f]
 * 						err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 						if err<=erro and (a!=b and a!=e and a!=f and b!=e and b!=f and e!=f):
 * 							if self.limites(rodas[a], rodas[b], 80, 80, rodas[e], rodas[f]):
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 785, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyNumber_Subtract(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 785, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_err = fabs(__pyx_t_13);

          /* "rodasdemuda.pyx":786
 * 						razaom=rodas[a]/rodas[b]*rodas[e]/rodas[f]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=e and a!=f and b!=e and b!=f and e!=f):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], 80, 80, rodas[e], rodas[f]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=80, D=80, E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 */
          __pyx_t_15 = ((__pyx_v_err <= __pyx_v_erro) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_b) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_e) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_a != __pyx_v_f) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_e) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_b != __pyx_v_f) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L12_bool_binop_done;
          }
          __pyx_t_15 = ((__pyx_v_e != __pyx_v_f) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L12_bool_binop_done:;
          if (__pyx_t_14) {

            /* "rodasdemuda.pyx":787
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=e and a!=f and b!=e and b!=f and e!=f):
 * 							if self.limites(rodas[a], rodas[b], 80, 80, rodas[e], rodas[f]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=80, D=80, E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 * 
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 787, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 787, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_e])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 787, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_f])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 787, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = NULL;
            __pyx_t_20 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
                __pyx_t_20 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_int_80, __pyx_int_80, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 6+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 787, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
              PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_1, __pyx_t_16, __pyx_int_80, __pyx_int_80, __pyx_t_17, __pyx_t_18};
              __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_20, 6+__pyx_t_20); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 787, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            } else
            #endif
            {
              __pyx_t_21 = PyTuple_New(6+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 787, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_16);
              __Pyx_INCREF(__pyx_int_80);
              __Pyx_GIVEREF(__pyx_int_80);
              PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_20, __pyx_int_80);
              __Pyx_INCREF(__pyx_int_80);
              __Pyx_GIVEREF(__pyx_int_80);
              PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_20, __pyx_int_80);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_21, 4+__pyx_t_20, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_18);
              PyTuple_SET_ITEM(__pyx_t_21, 5+__pyx_t_20, __pyx_t_18);
              __pyx_t_1 = 0;
              __pyx_t_16 = 0;
              __pyx_t_17 = 0;
              __pyx_t_18 = 0;
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 787, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 787, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_14) {

              /* "rodasdemuda.pyx":788
 * 						if err<=erro and (a!=b and a!=e and a!=f and b!=e and b!=f and e!=f):
 * 							if self.limites(rodas[a], rodas[b], 80, 80, rodas[e], rodas[f]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=80, D=80, E=rodas[e], F=rodas[f], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
              __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_A, __pyx_t_11) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_B, __pyx_t_11) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_C, __pyx_int_80) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_D, __pyx_int_80) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_e])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_E, __pyx_t_11) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_f])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_F, __pyx_t_11) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_erro, __pyx_t_11) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_razaom, __pyx_t_11) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_22 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_12); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 788, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

              /* "rodasdemuda.pyx":787
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=e and a!=f and b!=e and b!=f and e!=f):
 * 							if self.limites(rodas[a], rodas[b], 80, 80, rodas[e], rodas[f]):             # <<<<<<<<<<<<<<
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=80, D=80, E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 * 
 */
            }

            /* "rodasdemuda.pyx":786
 * 						razaom=rodas[a]/rodas[b]*rodas[e]/rodas[f]
 * 						err = fabs (self._razao - razaom)
 * 						if err<=erro and (a!=b and a!=e and a!=f and b!=e and b!=f and e!=f):             # <<<<<<<<<<<<<<
 * 							if self.limites(rodas[a], rodas[b], 80, 80, rodas[e], rodas[f]):
 * 								result.append(dict (A=rodas[a], B=rodas[b], C=80, D=80, E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 */
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":791
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Spiromatic_11rodasdemuda_lambda9, 0, __pyx_n_s_Spiromatic_rodasdemuda_locals_la, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_keyfunc = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":792
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_v_result);
  __pyx_t_18 = PyDict_New(); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_21, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_t_17, __pyx_v_keyfunc};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_21 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    if (__pyx_t_18) {
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_18); __pyx_t_18 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_4, __pyx_t_17);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_17 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_21, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_giter = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":793
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_11 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_11); __pyx_t_2 = 0;
    __pyx_t_23 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 793, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_23)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_2); __Pyx_INCREF(__pyx_t_21); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
        #else
        __pyx_t_21 = PySequence_ITEM(__pyx_t_11, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        #endif
      }
    } else {
      __pyx_t_21 = __pyx_t_23(__pyx_t_11);
      if (unlikely(!__pyx_t_21)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 793, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_21);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_21);
    __pyx_t_21 = 0;
    __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = __Pyx_PyIter_Next(__pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "rodasdemuda.pyx":796
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_result);
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_key, __pyx_t_21) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
  __pyx_t_21 = 0;

  /* "rodasdemuda.pyx":799
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 799, __pyx_L1_error)
  __pyx_t_14 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_14) {

    /* "rodasdemuda.pyx":800
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_21 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__30, 1, 1, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "rodasdemuda.pyx":799
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":802
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * 	def rodasdemuda6(self, float erro = 0.001):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":764
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":804
 * 		return result
 * 
 * 	def rodasdemuda6(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_7rodasdemuda6(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Spiromatic_7rodasdemuda6 = {"rodasdemuda6", (PyCFunction)__pyx_pw_11rodasdemuda_10Spiromatic_7rodasdemuda6, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_7rodasdemuda6(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_erro;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rodasdemuda6 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_erro,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_erro);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rodasdemuda6") < 0)) __PYX_ERR(0, 804, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_erro = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_erro == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L3_error)
    } else {
      __pyx_v_erro = ((float)((double)0.001));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rodasdemuda6", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 804, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.rodasdemuda6", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11rodasdemuda_10Spiromatic_6rodasdemuda6(__pyx_self, __pyx_v_self, __pyx_v_erro);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":835
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */

/* Python wrapper */
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_12rodasdemuda6_lambda10(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static PyMethodDef __pyx_mdef_11rodasdemuda_10Spiromatic_12rodasdemuda6_lambda10 = {"lambda10", (PyCFunction)__pyx_pw_11rodasdemuda_10Spiromatic_12rodasdemuda6_lambda10, METH_O, 0};
static PyObject *__pyx_pw_11rodasdemuda_10Spiromatic_12rodasdemuda6_lambda10(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda10 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda10(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda10(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("lambda10", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_C); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_E); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_F); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.rodasdemuda6.lambda10", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rodasdemuda.pyx":804
 * 		return result
 * 
 * 	def rodasdemuda6(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

static PyObject *__pyx_pf_11rodasdemuda_10Spiromatic_6rodasdemuda6(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_erro) {
  float __pyx_v_razaom;
  float __pyx_v_err;
  int __pyx_v_lrodas;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_c;
  int __pyx_v_d;
  int __pyx_v_e;
  int __pyx_v_f;
  std::vector<float>  __pyx_v_rodas;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_keyfunc = NULL;
  PyObject *__pyx_v_giter = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  std::vector<float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  double __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_t_24;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_t_26;
  PyObject *(*__pyx_t_27)(PyObject *);
  __Pyx_RefNannySetupContext("rodasdemuda6", 0);

  /* "rodasdemuda.pyx":806
 * 	def rodasdemuda6(self, float erro = 0.001):
 * 		cdef float razaom, err
 * 		razaom = 0             # <<<<<<<<<<<<<<
 * 		err = 0
 * 
 */
  __pyx_v_razaom = 0.0;

  /* "rodasdemuda.pyx":807
 * 		cdef float razaom, err
 * 		razaom = 0
 * 		err = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef int lrodas, a, b, c, d, e, f
 */
  __pyx_v_err = 0.0;

  /* "rodasdemuda.pyx":810
 * 
 * 		cdef int lrodas, a, b, c, d, e, f
 * 		a = 0             # <<<<<<<<<<<<<<
 * 		b = 0
 * 		c = 0
 */
  __pyx_v_a = 0;

  /* "rodasdemuda.pyx":811
 * 		cdef int lrodas, a, b, c, d, e, f
 * 		a = 0
 * 		b = 0             # <<<<<<<<<<<<<<
 * 		c = 0
 * 		d = 0
 */
  __pyx_v_b = 0;

  /* "rodasdemuda.pyx":812
 * 		a = 0
 * 		b = 0
 * 		c = 0             # <<<<<<<<<<<<<<
 * 		d = 0
 * 		e = 0
 */
  __pyx_v_c = 0;

  /* "rodasdemuda.pyx":813
 * 		b = 0
 * 		c = 0
 * 		d = 0             # <<<<<<<<<<<<<<
 * 		e = 0
 * 		f = 0
 */
  __pyx_v_d = 0;

  /* "rodasdemuda.pyx":814
 * 		c = 0
 * 		d = 0
 * 		e = 0             # <<<<<<<<<<<<<<
 * 		f = 0
 * 		lrodas = len (self._conj_rodas)
 */
  __pyx_v_e = 0;

  /* "rodasdemuda.pyx":815
 * 		d = 0
 * 		e = 0
 * 		f = 0             # <<<<<<<<<<<<<<
 * 		lrodas = len (self._conj_rodas)
 * 
 */
  __pyx_v_f = 0;

  /* "rodasdemuda.pyx":816
 * 		e = 0
 * 		f = 0
 * 		lrodas = len (self._conj_rodas)             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[float] rodas = self._conj_rodas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lrodas = __pyx_t_2;

  /* "rodasdemuda.pyx":818
 * 		lrodas = len (self._conj_rodas)
 * 
 * 		cdef vector[float] rodas = self._conj_rodas             # <<<<<<<<<<<<<<
 * 
 * 		result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_conj_rodas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rodas = __pyx_t_3;

  /* "rodasdemuda.pyx":820
 * 		cdef vector[float] rodas = self._conj_rodas
 * 
 * 		result = []             # <<<<<<<<<<<<<<
 * 
 * 		for a from 0 <= a < lrodas:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":822
 * 		result = []
 * 
 * 		for a from 0 <= a < lrodas:             # <<<<<<<<<<<<<<
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 */
  __pyx_t_4 = __pyx_v_lrodas;
  for (__pyx_v_a = 0; __pyx_v_a < __pyx_t_4; __pyx_v_a++) {

    /* "rodasdemuda.pyx":823
 * 
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:             # <<<<<<<<<<<<<<
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 */
    __pyx_t_5 = __pyx_v_lrodas;
    for (__pyx_v_b = 0; __pyx_v_b < __pyx_t_5; __pyx_v_b++) {

      /* "rodasdemuda.pyx":824
 * 		for a from 0 <= a < lrodas:
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:             # <<<<<<<<<<<<<<
 * 					for d from 0 <= d < lrodas:
 * 						for e from 0 <= e < lrodas:
 */
      __pyx_t_6 = __pyx_v_lrodas;
      for (__pyx_v_c = 0; __pyx_v_c < __pyx_t_6; __pyx_v_c++) {

        /* "rodasdemuda.pyx":825
 * 			for b from 0 <= b < lrodas:
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:             # <<<<<<<<<<<<<<
 * 						for e from 0 <= e < lrodas:
 * 							for f from 0 <= f < lrodas:
 */
        __pyx_t_7 = __pyx_v_lrodas;
        for (__pyx_v_d = 0; __pyx_v_d < __pyx_t_7; __pyx_v_d++) {

          /* "rodasdemuda.pyx":826
 * 				for c from 0 <= c < lrodas:
 * 					for d from 0 <= d < lrodas:
 * 						for e from 0 <= e < lrodas:             # <<<<<<<<<<<<<<
 * 							for f from 0 <= f < lrodas:
 * 								razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]*rodas[e]/rodas[f]
 */
          __pyx_t_8 = __pyx_v_lrodas;
          for (__pyx_v_e = 0; __pyx_v_e < __pyx_t_8; __pyx_v_e++) {

            /* "rodasdemuda.pyx":827
 * 					for d from 0 <= d < lrodas:
 * 						for e from 0 <= e < lrodas:
 * 							for f from 0 <= f < lrodas:             # <<<<<<<<<<<<<<
 * 								razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]*rodas[e]/rodas[f]
 * 								err = fabs (self._razao - razaom)
 */
            __pyx_t_9 = __pyx_v_lrodas;
            for (__pyx_v_f = 0; __pyx_v_f < __pyx_t_9; __pyx_v_f++) {

              /* "rodasdemuda.pyx":828
 * 						for e from 0 <= e < lrodas:
 * 							for f from 0 <= f < lrodas:
 * 								razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]*rodas[e]/rodas[f]             # <<<<<<<<<<<<<<
 * 								err = fabs (self._razao - razaom)
 * 								if err<=erro and (a!=b and a!=c and a!=d and a!=e and a!=f and b!=c and b!=d and b!=e and b!=f and c!=d and c!=e and c!=f and e!=f):
 */
              __pyx_t_10 = (__pyx_v_rodas[__pyx_v_a]);
              __pyx_t_11 = (__pyx_v_rodas[__pyx_v_b]);
              if (unlikely(__pyx_t_11 == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 828, __pyx_L1_error)
              }
              __pyx_t_12 = ((__pyx_t_10 / __pyx_t_11) * (__pyx_v_rodas[__pyx_v_c]));
              __pyx_t_11 = (__pyx_v_rodas[__pyx_v_d]);
              if (unlikely(__pyx_t_11 == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 828, __pyx_L1_error)
              }
              __pyx_t_10 = ((__pyx_t_12 / __pyx_t_11) * (__pyx_v_rodas[__pyx_v_e]));
              __pyx_t_11 = (__pyx_v_rodas[__pyx_v_f]);
              if (unlikely(__pyx_t_11 == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 828, __pyx_L1_error)
              }
              __pyx_v_razaom = (__pyx_t_10 / __pyx_t_11);

              /* "rodasdemuda.pyx":829
 * 							for f from 0 <= f < lrodas:
 * 								razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]*rodas[e]/rodas[f]
 * 								err = fabs (self._razao - razaom)             # <<<<<<<<<<<<<<
 * 								if err<=erro and (a!=b and a!=c and a!=d and a!=e and a!=f and b!=c and b!=d and b!=e and b!=f and c!=d and c!=e and c!=f and e!=f):
 * 									if self.limites(rodas[a], rodas[b], rodas[c], rodas[d], rodas[e], rodas[f]):
 */
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_razao); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_13 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 829, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_14 = PyNumber_Subtract(__pyx_t_1, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 829, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_14); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __pyx_v_err = fabs(__pyx_t_15);

              /* "rodasdemuda.pyx":830
 * 								razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]*rodas[e]/rodas[f]
 * 								err = fabs (self._razao - razaom)
 * 								if err<=erro and (a!=b and a!=c and a!=d and a!=e and a!=f and b!=c and b!=d and b!=e and b!=f and c!=d and c!=e and c!=f and e!=f):             # <<<<<<<<<<<<<<
 * 									if self.limites(rodas[a], rodas[b], rodas[c], rodas[d], rodas[e], rodas[f]):
 * 										result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 */
              __pyx_t_17 = ((__pyx_v_err <= __pyx_v_erro) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_a != __pyx_v_b) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_a != __pyx_v_c) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_a != __pyx_v_d) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_a != __pyx_v_e) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_a != __pyx_v_f) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_b != __pyx_v_c) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_b != __pyx_v_d) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_b != __pyx_v_e) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_b != __pyx_v_f) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_c != __pyx_v_d) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_c != __pyx_v_e) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_c != __pyx_v_f) != 0);
              if (__pyx_t_17) {
              } else {
                __pyx_t_16 = __pyx_t_17;
                goto __pyx_L16_bool_binop_done;
              }
              __pyx_t_17 = ((__pyx_v_e != __pyx_v_f) != 0);
              __pyx_t_16 = __pyx_t_17;
              __pyx_L16_bool_binop_done:;
              if (__pyx_t_16) {

                /* "rodasdemuda.pyx":831
 * 								err = fabs (self._razao - razaom)
 * 								if err<=erro and (a!=b and a!=c and a!=d and a!=e and a!=f and b!=c and b!=d and b!=e and b!=f and c!=d and c!=e and c!=f and e!=f):
 * 									if self.limites(rodas[a], rodas[b], rodas[c], rodas[d], rodas[e], rodas[f]):             # <<<<<<<<<<<<<<
 * 										result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 * 
 */
                __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_limites); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_1 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_18 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_18);
                __pyx_t_19 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_19);
                __pyx_t_20 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_20);
                __pyx_t_21 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_e])); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_22 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_f])); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_22);
                __pyx_t_23 = NULL;
                __pyx_t_24 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
                  __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_13);
                  if (likely(__pyx_t_23)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                    __Pyx_INCREF(__pyx_t_23);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_13, function);
                    __pyx_t_24 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_13)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_23, __pyx_t_1, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22};
                  __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_24, 6+__pyx_t_24); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 831, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_23, __pyx_t_1, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22};
                  __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_24, 6+__pyx_t_24); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 831, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                } else
                #endif
                {
                  __pyx_t_25 = PyTuple_New(6+__pyx_t_24); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 831, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_25);
                  if (__pyx_t_23) {
                    __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_23); __pyx_t_23 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_1);
                  PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_24, __pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_18);
                  PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_24, __pyx_t_18);
                  __Pyx_GIVEREF(__pyx_t_19);
                  PyTuple_SET_ITEM(__pyx_t_25, 2+__pyx_t_24, __pyx_t_19);
                  __Pyx_GIVEREF(__pyx_t_20);
                  PyTuple_SET_ITEM(__pyx_t_25, 3+__pyx_t_24, __pyx_t_20);
                  __Pyx_GIVEREF(__pyx_t_21);
                  PyTuple_SET_ITEM(__pyx_t_25, 4+__pyx_t_24, __pyx_t_21);
                  __Pyx_GIVEREF(__pyx_t_22);
                  PyTuple_SET_ITEM(__pyx_t_25, 5+__pyx_t_24, __pyx_t_22);
                  __pyx_t_1 = 0;
                  __pyx_t_18 = 0;
                  __pyx_t_19 = 0;
                  __pyx_t_20 = 0;
                  __pyx_t_21 = 0;
                  __pyx_t_22 = 0;
                  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_25, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 831, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                }
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 831, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                if (__pyx_t_16) {

                  /* "rodasdemuda.pyx":832
 * 								if err<=erro and (a!=b and a!=c and a!=d and a!=e and a!=f and b!=c and b!=d and b!=e and b!=f and c!=d and c!=e and c!=f and e!=f):
 * 									if self.limites(rodas[a], rodas[b], rodas[c], rodas[d], rodas[e], rodas[f]):
 * 										result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], E=rodas[e], F=rodas[f], erro=err, razaom=razaom))             # <<<<<<<<<<<<<<
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 */
                  __pyx_t_14 = PyDict_New(); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __pyx_t_13 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_a])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_A, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_b])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_B, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_c])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_C, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_d])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_D, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_e])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_E, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = PyFloat_FromDouble((__pyx_v_rodas[__pyx_v_f])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_F, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_erro, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_razaom); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_razaom, __pyx_t_13) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_26 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_14); if (unlikely(__pyx_t_26 == -1)) __PYX_ERR(0, 832, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

                  /* "rodasdemuda.pyx":831
 * 								err = fabs (self._razao - razaom)
 * 								if err<=erro and (a!=b and a!=c and a!=d and a!=e and a!=f and b!=c and b!=d and b!=e and b!=f and c!=d and c!=e and c!=f and e!=f):
 * 									if self.limites(rodas[a], rodas[b], rodas[c], rodas[d], rodas[e], rodas[f]):             # <<<<<<<<<<<<<<
 * 										result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 * 
 */
                }

                /* "rodasdemuda.pyx":830
 * 								razaom=rodas[a]/rodas[b]*rodas[c]/rodas[d]*rodas[e]/rodas[f]
 * 								err = fabs (self._razao - razaom)
 * 								if err<=erro and (a!=b and a!=c and a!=d and a!=e and a!=f and b!=c and b!=d and b!=e and b!=f and c!=d and c!=e and c!=f and e!=f):             # <<<<<<<<<<<<<<
 * 									if self.limites(rodas[a], rodas[b], rodas[c], rodas[d], rodas[e], rodas[f]):
 * 										result.append(dict (A=rodas[a], B=rodas[b], C=rodas[c], D=rodas[d], E=rodas[e], F=rodas[f], erro=err, razaom=razaom))
 */
              }
            }
          }
        }
      }
    }
  }

  /* "rodasdemuda.pyx":835
 * 
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])             # <<<<<<<<<<<<<<
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]
 */
  __pyx_t_14 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Spiromatic_12rodasdemuda6_lambda10, 0, __pyx_n_s_Spiromatic_rodasdemuda6_locals_l, NULL, __pyx_n_s_rodasdemuda, __pyx_d, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_v_keyfunc = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "rodasdemuda.pyx":836
 * 		#remove resultados com conjuntos duplicados devido a existirem rodas de muda iguais
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)             # <<<<<<<<<<<<<<
 * 		result = [next(g[1]) for g in giter]
 * 
 */
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_25 = PyTuple_New(1); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_v_result);
  __pyx_t_22 = PyDict_New(); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  if (PyDict_SetItem(__pyx_t_22, __pyx_n_s_key, __pyx_v_keyfunc) < 0) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_25, __pyx_t_22); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_t_21, __pyx_v_keyfunc};
    __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_t_21, __pyx_v_keyfunc};
    __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  } else
  #endif
  {
    __pyx_t_25 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_25);
    if (__pyx_t_22) {
      __Pyx_GIVEREF(__pyx_t_22); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_22); __pyx_t_22 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_21);
    PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_4, __pyx_t_21);
    __Pyx_INCREF(__pyx_v_keyfunc);
    __Pyx_GIVEREF(__pyx_v_keyfunc);
    PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_4, __pyx_v_keyfunc);
    __pyx_t_21 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_25, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_v_giter = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "rodasdemuda.pyx":837
 * 		keyfunc = lambda d: (d['A'], d['B'], d['C'], d['D'], d['E'], d['F'])
 * 		giter = groupby(sorted(result, key=keyfunc), keyfunc)
 * 		result = [next(g[1]) for g in giter]             # <<<<<<<<<<<<<<
 * 
 * 		#ordena os resultados pelo erro, ascendente
 */
  __pyx_t_14 = PyList_New(0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (likely(PyList_CheckExact(__pyx_v_giter)) || PyTuple_CheckExact(__pyx_v_giter)) {
    __pyx_t_13 = __pyx_v_giter; __Pyx_INCREF(__pyx_t_13); __pyx_t_2 = 0;
    __pyx_t_27 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_v_giter); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_27 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 837, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_27)) {
      if (likely(PyList_CheckExact(__pyx_t_13))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_13)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_25 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_2); __Pyx_INCREF(__pyx_t_25); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 837, __pyx_L1_error)
        #else
        __pyx_t_25 = PySequence_ITEM(__pyx_t_13, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_25 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_2); __Pyx_INCREF(__pyx_t_25); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 837, __pyx_L1_error)
        #else
        __pyx_t_25 = PySequence_ITEM(__pyx_t_13, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        #endif
      }
    } else {
      __pyx_t_25 = __pyx_t_27(__pyx_t_13);
      if (unlikely(!__pyx_t_25)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 837, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_25);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_25);
    __pyx_t_25 = 0;
    __pyx_t_25 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_25);
    __pyx_t_21 = __Pyx_PyIter_Next(__pyx_t_25); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_14, (PyObject*)__pyx_t_21))) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_14);
  __pyx_t_14 = 0;

  /* "rodasdemuda.pyx":840
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_result);
  __pyx_t_13 = PyDict_New(); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_21 = __Pyx_GetModuleGlobalName(__pyx_n_s_itemgetter); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_key, __pyx_t_25) < 0) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_14, __pyx_t_13); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_25);
  __pyx_t_25 = 0;

  /* "rodasdemuda.pyx":843
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_result); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_t_16 = ((__pyx_t_2 > 12) != 0);
  if (__pyx_t_16) {

    /* "rodasdemuda.pyx":844
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
    __pyx_t_25 = __Pyx_PyObject_GetSlice(__pyx_v_result, 0, 12, NULL, NULL, &__pyx_slice__32, 1, 1, 1); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_25);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_25);
    __pyx_t_25 = 0;

    /* "rodasdemuda.pyx":843
 * 
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:             # <<<<<<<<<<<<<<
 * 			result = result[0:12]
 * 
 */
  }

  /* "rodasdemuda.pyx":846
 * 			result = result[0:12]
 * 
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rodasdemuda.pyx":804
 * 		return result
 * 
 * 	def rodasdemuda6(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_AddTraceback("rodasdemuda.Spiromatic.rodasdemuda6", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_keyfunc);
  __Pyx_XDECREF(__pyx_v_giter);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *__pyx_v_o) {
  std::vector<float>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_float", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "rodasdemuda",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_250x5, __pyx_k_250x5, sizeof(__pyx_k_250x5), 0, 0, 1, 0},
  {&__pyx_kp_s_31_March_2013, __pyx_k_31_March_2013, sizeof(__pyx_k_31_March_2013), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_k_C_Users_Daniel_Dropbox_projectos, sizeof(__pyx_k_C_Users_Daniel_Dropbox_projectos), 0, 0, 1, 0},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_DIFERENCIAL, __pyx_k_DIFERENCIAL, sizeof(__pyx_k_DIFERENCIAL), 0, 0, 1, 1},
  {&__pyx_n_s_DIREITA, __pyx_k_DIREITA, sizeof(__pyx_k_DIREITA), 0, 0, 1, 1},
  {&__pyx_kp_s_Daniel_Oliveira, __pyx_k_Daniel_Oliveira, sizeof(__pyx_k_Daniel_Oliveira), 0, 0, 1, 0},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_ESQUERDA, __pyx_k_ESQUERDA, sizeof(__pyx_k_ESQUERDA), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_n_s_Heckert, __pyx_k_Heckert, sizeof(__pyx_k_Heckert), 0, 0, 1, 1},
  {&__pyx_kp_s_Heckert_ZFWG_250, __pyx_k_Heckert_ZFWG_250, sizeof(__pyx_k_Heckert_ZFWG_250), 0, 0, 1, 0},
  {&__pyx_n_s_Heckert___init, __pyx_k_Heckert___init, sizeof(__pyx_k_Heckert___init), 0, 0, 1, 1},
  {&__pyx_n_s_Heckert_limites, __pyx_k_Heckert_limites, sizeof(__pyx_k_Heckert_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Heckert_rodasdemuda, __pyx_k_Heckert_rodasdemuda, sizeof(__pyx_k_Heckert_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Heckert_rodasdemuda_locals_lambd, __pyx_k_Heckert_rodasdemuda_locals_lambd, sizeof(__pyx_k_Heckert_rodasdemuda_locals_lambd), 0, 0, 1, 1},
  {&__pyx_n_s_LINDNER, __pyx_k_LINDNER, sizeof(__pyx_k_LINDNER), 0, 0, 1, 1},
  {&__pyx_n_s_Lindner, __pyx_k_Lindner, sizeof(__pyx_k_Lindner), 0, 0, 1, 1},
  {&__pyx_n_s_Lindner___init, __pyx_k_Lindner___init, sizeof(__pyx_k_Lindner___init), 0, 0, 1, 1},
  {&__pyx_n_s_Lindner_limites, __pyx_k_Lindner_limites, sizeof(__pyx_k_Lindner_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Lindner_rodasdemuda, __pyx_k_Lindner_rodasdemuda, sizeof(__pyx_k_Lindner_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Lindner_rodasdemuda_locals_lambd, __pyx_k_Lindner_rodasdemuda_locals_lambd, sizeof(__pyx_k_Lindner_rodasdemuda_locals_lambd), 0, 0, 1, 1},
  {&__pyx_n_s_MAX, __pyx_k_MAX, sizeof(__pyx_k_MAX), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_A, __pyx_k_MAX_A, sizeof(__pyx_k_MAX_A), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_AB, __pyx_k_MAX_AB, sizeof(__pyx_k_MAX_AB), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_B, __pyx_k_MAX_B, sizeof(__pyx_k_MAX_B), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_C, __pyx_k_MAX_C, sizeof(__pyx_k_MAX_C), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_CD, __pyx_k_MAX_CD, sizeof(__pyx_k_MAX_CD), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_D, __pyx_k_MAX_D, sizeof(__pyx_k_MAX_D), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_EF, __pyx_k_MAX_EF, sizeof(__pyx_k_MAX_EF), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_F, __pyx_k_MAX_F, sizeof(__pyx_k_MAX_F), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_T, __pyx_k_MAX_T, sizeof(__pyx_k_MAX_T), 0, 0, 1, 1},
  {&__pyx_n_s_MIN, __pyx_k_MIN, sizeof(__pyx_k_MIN), 0, 0, 1, 1},
  {&__pyx_n_s_MIN_AB, __pyx_k_MIN_AB, sizeof(__pyx_k_MIN_AB), 0, 0, 1, 1},
  {&__pyx_n_s_MIN_CD, __pyx_k_MIN_CD, sizeof(__pyx_k_MIN_CD), 0, 0, 1, 1},
  {&__pyx_n_s_MIN_EF, __pyx_k_MIN_EF, sizeof(__pyx_k_MIN_EF), 0, 0, 1, 1},
  {&__pyx_n_s_MIN_T, __pyx_k_MIN_T, sizeof(__pyx_k_MIN_T), 0, 0, 1, 1},
  {&__pyx_n_s_MIN_T_AB, __pyx_k_MIN_T_AB, sizeof(__pyx_k_MIN_T_AB), 0, 0, 1, 1},
  {&__pyx_n_s_MIN_T_CD, __pyx_k_MIN_T_CD, sizeof(__pyx_k_MIN_T_CD), 0, 0, 1, 1},
  {&__pyx_n_s_Modul, __pyx_k_Modul, sizeof(__pyx_k_Modul), 0, 0, 1, 1},
  {&__pyx_n_s_Modul___init, __pyx_k_Modul___init, sizeof(__pyx_k_Modul___init), 0, 0, 1, 1},
  {&__pyx_n_s_Modul_limites, __pyx_k_Modul_limites, sizeof(__pyx_k_Modul_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Modul_rodasdemuda, __pyx_k_Modul_rodasdemuda, sizeof(__pyx_k_Modul_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Modul_rodasdemuda_locals_lambda, __pyx_k_Modul_rodasdemuda_locals_lambda, sizeof(__pyx_k_Modul_rodasdemuda_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_NAVALHAO, __pyx_k_NAVALHAO, sizeof(__pyx_k_NAVALHAO), 0, 0, 1, 1},
  {&__pyx_n_s_P2300, __pyx_k_P2300, sizeof(__pyx_k_P2300), 0, 0, 1, 1},
  {&__pyx_n_s_P251, __pyx_k_P251, sizeof(__pyx_k_P251), 0, 0, 1, 1},
  {&__pyx_n_s_P630, __pyx_k_P630, sizeof(__pyx_k_P630), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter251, __pyx_k_Pfauter251, sizeof(__pyx_k_Pfauter251), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter251___init, __pyx_k_Pfauter251___init, sizeof(__pyx_k_Pfauter251___init), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter251_limites, __pyx_k_Pfauter251_limites, sizeof(__pyx_k_Pfauter251_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter251_rodasdemuda, __pyx_k_Pfauter251_rodasdemuda, sizeof(__pyx_k_Pfauter251_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter251_rodasdemuda_locals_la, __pyx_k_Pfauter251_rodasdemuda_locals_la, sizeof(__pyx_k_Pfauter251_rodasdemuda_locals_la), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter630, __pyx_k_Pfauter630, sizeof(__pyx_k_Pfauter630), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter630___init, __pyx_k_Pfauter630___init, sizeof(__pyx_k_Pfauter630___init), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter630_limites, __pyx_k_Pfauter630_limites, sizeof(__pyx_k_Pfauter630_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter630_rodasdemuda, __pyx_k_Pfauter630_rodasdemuda, sizeof(__pyx_k_Pfauter630_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Pfauter630_rodasdemuda_locals_la, __pyx_k_Pfauter630_rodasdemuda_locals_la, sizeof(__pyx_k_Pfauter630_rodasdemuda_locals_la), 0, 0, 1, 1},
  {&__pyx_n_s_Reishauer, __pyx_k_Reishauer, sizeof(__pyx_k_Reishauer), 0, 0, 1, 1},
  {&__pyx_n_s_ReishauerDressage, __pyx_k_ReishauerDressage, sizeof(__pyx_k_ReishauerDressage), 0, 0, 1, 1},
  {&__pyx_n_s_ReishauerDressage___init, __pyx_k_ReishauerDressage___init, sizeof(__pyx_k_ReishauerDressage___init), 0, 0, 1, 1},
  {&__pyx_n_s_ReishauerDressage_limites, __pyx_k_ReishauerDressage_limites, sizeof(__pyx_k_ReishauerDressage_limites), 0, 0, 1, 1},
  {&__pyx_n_s_ReishauerDressage_rodasdemuda, __pyx_k_ReishauerDressage_rodasdemuda, sizeof(__pyx_k_ReishauerDressage_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_ReishauerDressage_rodasdemuda_lo, __pyx_k_ReishauerDressage_rodasdemuda_lo, sizeof(__pyx_k_ReishauerDressage_rodasdemuda_lo), 0, 0, 1, 1},
  {&__pyx_n_s_Reishauer___init, __pyx_k_Reishauer___init, sizeof(__pyx_k_Reishauer___init), 0, 0, 1, 1},
  {&__pyx_n_s_Reishauer_limites, __pyx_k_Reishauer_limites, sizeof(__pyx_k_Reishauer_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Reishauer_rodasdemuda, __pyx_k_Reishauer_rodasdemuda, sizeof(__pyx_k_Reishauer_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Reishauer_rodasdemuda_locals_lam, __pyx_k_Reishauer_rodasdemuda_locals_lam, sizeof(__pyx_k_Reishauer_rodasdemuda_locals_lam), 0, 0, 1, 1},
  {&__pyx_n_s_Rollete, __pyx_k_Rollete, sizeof(__pyx_k_Rollete), 0, 0, 1, 1},
  {&__pyx_n_s_Rollete___init, __pyx_k_Rollete___init, sizeof(__pyx_k_Rollete___init), 0, 0, 1, 1},
  {&__pyx_n_s_Rollete_limites, __pyx_k_Rollete_limites, sizeof(__pyx_k_Rollete_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Rollete_rodasdemuda, __pyx_k_Rollete_rodasdemuda, sizeof(__pyx_k_Rollete_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Rollete_rodasdemuda_locals_lambd, __pyx_k_Rollete_rodasdemuda_locals_lambd, sizeof(__pyx_k_Rollete_rodasdemuda_locals_lambd), 0, 0, 1, 1},
  {&__pyx_kp_s_Runderland_5A_4C, __pyx_k_Runderland_5A_4C, sizeof(__pyx_k_Runderland_5A_4C), 0, 0, 1, 0},
  {&__pyx_n_s_Spiromatic, __pyx_k_Spiromatic, sizeof(__pyx_k_Spiromatic), 0, 0, 1, 1},
  {&__pyx_n_s_Spiromatic___init, __pyx_k_Spiromatic___init, sizeof(__pyx_k_Spiromatic___init), 0, 0, 1, 1},
  {&__pyx_n_s_Spiromatic_limites, __pyx_k_Spiromatic_limites, sizeof(__pyx_k_Spiromatic_limites), 0, 0, 1, 1},
  {&__pyx_n_s_Spiromatic_rodasdemuda, __pyx_k_Spiromatic_rodasdemuda, sizeof(__pyx_k_Spiromatic_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_Spiromatic_rodasdemuda6, __pyx_k_Spiromatic_rodasdemuda6, sizeof(__pyx_k_Spiromatic_rodasdemuda6), 0, 0, 1, 1},
  {&__pyx_n_s_Spiromatic_rodasdemuda6_locals_l, __pyx_k_Spiromatic_rodasdemuda6_locals_l, sizeof(__pyx_k_Spiromatic_rodasdemuda6_locals_l), 0, 0, 1, 1},
  {&__pyx_n_s_Spiromatic_rodasdemuda_locals_la, __pyx_k_Spiromatic_rodasdemuda_locals_la, sizeof(__pyx_k_Spiromatic_rodasdemuda_locals_la), 0, 0, 1, 1},
  {&__pyx_n_s_TANGENCIAL, __pyx_k_TANGENCIAL, sizeof(__pyx_k_TANGENCIAL), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_beta_2, __pyx_k_beta_2, sizeof(__pyx_k_beta_2), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_common, __pyx_k_common, sizeof(__pyx_k_common), 0, 0, 1, 1},
  {&__pyx_n_s_conj_rodas, __pyx_k_conj_rodas, sizeof(__pyx_k_conj_rodas), 0, 0, 1, 1},
  {&__pyx_n_s_conjunto, __pyx_k_conjunto, sizeof(__pyx_k_conjunto), 0, 0, 1, 1},
  {&__pyx_n_s_contact, __pyx_k_contact, sizeof(__pyx_k_contact), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_kp_s_danielfilipe_mo_gmail_com, __pyx_k_danielfilipe_mo_gmail_com, sizeof(__pyx_k_danielfilipe_mo_gmail_com), 0, 0, 1, 0},
  {&__pyx_n_s_date, __pyx_k_date, sizeof(__pyx_k_date), 0, 0, 1, 1},
  {&__pyx_n_s_degrees, __pyx_k_degrees, sizeof(__pyx_k_degrees), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_entradas, __pyx_k_entradas, sizeof(__pyx_k_entradas), 0, 0, 1, 1},
  {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {&__pyx_n_s_erro, __pyx_k_erro, sizeof(__pyx_k_erro), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_giter, __pyx_k_giter, sizeof(__pyx_k_giter), 0, 0, 1, 1},
  {&__pyx_n_s_groupby, __pyx_k_groupby, sizeof(__pyx_k_groupby), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_itemgetter, __pyx_k_itemgetter, sizeof(__pyx_k_itemgetter), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keyfunc, __pyx_k_keyfunc, sizeof(__pyx_k_keyfunc), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_limites, __pyx_k_limites, sizeof(__pyx_k_limites), 0, 0, 1, 1},
  {&__pyx_n_s_lrodas, __pyx_k_lrodas, sizeof(__pyx_k_lrodas), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_modelo, __pyx_k_modelo, sizeof(__pyx_k_modelo), 0, 0, 1, 1},
  {&__pyx_n_s_modo, __pyx_k_modo, sizeof(__pyx_k_modo), 0, 0, 1, 1},
  {&__pyx_n_s_modo_2, __pyx_k_modo_2, sizeof(__pyx_k_modo_2), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_modulo, __pyx_k_modulo, sizeof(__pyx_k_modulo), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_operator, __pyx_k_operator, sizeof(__pyx_k_operator), 0, 0, 1, 1},
  {&__pyx_n_s_pfauter2300, __pyx_k_pfauter2300, sizeof(__pyx_k_pfauter2300), 0, 0, 1, 1},
  {&__pyx_n_s_pfauter251, __pyx_k_pfauter251, sizeof(__pyx_k_pfauter251), 0, 0, 1, 1},
  {&__pyx_n_s_pfauter630, __pyx_k_pfauter630, sizeof(__pyx_k_pfauter630), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_radians, __pyx_k_radians, sizeof(__pyx_k_radians), 0, 0, 1, 1},
  {&__pyx_n_s_razao, __pyx_k_razao, sizeof(__pyx_k_razao), 0, 0, 1, 1},
  {&__pyx_n_s_razaom, __pyx_k_razaom, sizeof(__pyx_k_razaom), 0, 0, 1, 1},
  {&__pyx_n_s_reishauer, __pyx_k_reishauer, sizeof(__pyx_k_reishauer), 0, 0, 1, 1},
  {&__pyx_n_s_reishauer_dressage, __pyx_k_reishauer_dressage, sizeof(__pyx_k_reishauer_dressage), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_rodas, __pyx_k_rodas, sizeof(__pyx_k_rodas), 0, 0, 1, 1},
  {&__pyx_n_s_rodasdemuda, __pyx_k_rodasdemuda, sizeof(__pyx_k_rodasdemuda), 0, 0, 1, 1},
  {&__pyx_n_s_rodasdemuda6, __pyx_k_rodasdemuda6, sizeof(__pyx_k_rodasdemuda6), 0, 0, 1, 1},
  {&__pyx_n_s_rollete, __pyx_k_rollete, sizeof(__pyx_k_rollete), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_sentido, __pyx_k_sentido, sizeof(__pyx_k_sentido), 0, 0, 1, 1},
  {&__pyx_n_s_sentido_2, __pyx_k_sentido_2, sizeof(__pyx_k_sentido_2), 0, 0, 1, 1},
  {&__pyx_n_s_six2dec, __pyx_k_six2dec, sizeof(__pyx_k_six2dec), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_w_2, __pyx_k_w_2, sizeof(__pyx_k_w_2), 0, 0, 1, 1},
  {&__pyx_n_s_zO, __pyx_k_zO, sizeof(__pyx_k_zO), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 70, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "rodasdemuda.pyx":17
 * 		self._name 			= 'rollete'
 * 		self._modelo 		= 'Runderland 5A-4C'
 * 		self._conj_rodas 	= (27,28,30,30,32,33,35,36,38,39,40,40,40,42,42,44,45,46,48,48,50,51,52,53,54,55,56,57,58,59,60,60,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,79,82,83,84,86,89,93,94,96,97,100,105,107,108,110,120,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  __pyx_tuple_ = PyTuple_Pack(64, __pyx_int_27, __pyx_int_28, __pyx_int_30, __pyx_int_30, __pyx_int_32, __pyx_int_33, __pyx_int_35, __pyx_int_36, __pyx_int_38, __pyx_int_39, __pyx_int_40, __pyx_int_40, __pyx_int_40, __pyx_int_42, __pyx_int_42, __pyx_int_44, __pyx_int_45, __pyx_int_46, __pyx_int_48, __pyx_int_48, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_59, __pyx_int_60, __pyx_int_60, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_63, __pyx_int_64, __pyx_int_65, __pyx_int_67, __pyx_int_68, __pyx_int_70, __pyx_int_71, __pyx_int_72, __pyx_int_73, __pyx_int_74, __pyx_int_75, __pyx_int_76, __pyx_int_79, __pyx_int_82, __pyx_int_83, __pyx_int_84, __pyx_int_86, __pyx_int_89, __pyx_int_93, __pyx_int_94, __pyx_int_96, __pyx_int_97, __pyx_int_100, __pyx_int_105, __pyx_int_107, __pyx_int_108, __pyx_int_110, __pyx_int_120, __pyx_int_127); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "rodasdemuda.pyx":74
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "rodasdemuda.pyx":78
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__3 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__3)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);

  /* "rodasdemuda.pyx":87
 * 		self._name 			= 'reishauer'
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  __pyx_tuple__4 = PyTuple_Pack(74, __pyx_int_35, __pyx_int_36, __pyx_int_38, __pyx_int_40, __pyx_int_40, __pyx_int_41, __pyx_int_42, __pyx_int_43, __pyx_int_44, __pyx_int_45, __pyx_int_45, __pyx_int_46, __pyx_int_47, __pyx_int_48, __pyx_int_49, __pyx_int_50, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_59, __pyx_int_60, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_63, __pyx_int_64, __pyx_int_65, __pyx_int_66, __pyx_int_67, __pyx_int_68, __pyx_int_69, __pyx_int_70, __pyx_int_70, __pyx_int_71, __pyx_int_72, __pyx_int_73, __pyx_int_74, __pyx_int_75, __pyx_int_75, __pyx_int_76, __pyx_int_78, __pyx_int_80, __pyx_int_80, __pyx_int_81, __pyx_int_82, __pyx_int_84, __pyx_int_85, __pyx_int_86, __pyx_int_87, __pyx_int_88, __pyx_int_90, __pyx_int_90, __pyx_int_91, __pyx_int_92, __pyx_int_93, __pyx_int_94, __pyx_int_95, __pyx_int_96, __pyx_int_100, __pyx_int_101, __pyx_int_103, __pyx_int_105, __pyx_int_106, __pyx_int_108, __pyx_int_110, __pyx_int_112, __pyx_int_118, __pyx_int_120); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "rodasdemuda.pyx":169
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "rodasdemuda.pyx":173
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__6 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);

  /* "rodasdemuda.pyx":182
 * 		self._name 			= 'reishauer_dressage'
 * 		self._modelo 		= 'reishauer'
 * 		self._conj_rodas 	= (35,36,38,40,40,41,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,75,76,78,80,80,81,82,84,85,86,87,88,90,90,91,92,93,94,95,96,100,101,103,105,106,108,110,112,118,120)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo
 */
  __pyx_tuple__7 = PyTuple_Pack(74, __pyx_int_35, __pyx_int_36, __pyx_int_38, __pyx_int_40, __pyx_int_40, __pyx_int_41, __pyx_int_42, __pyx_int_43, __pyx_int_44, __pyx_int_45, __pyx_int_45, __pyx_int_46, __pyx_int_47, __pyx_int_48, __pyx_int_49, __pyx_int_50, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_59, __pyx_int_60, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_63, __pyx_int_64, __pyx_int_65, __pyx_int_66, __pyx_int_67, __pyx_int_68, __pyx_int_69, __pyx_int_70, __pyx_int_70, __pyx_int_71, __pyx_int_72, __pyx_int_73, __pyx_int_74, __pyx_int_75, __pyx_int_75, __pyx_int_76, __pyx_int_78, __pyx_int_80, __pyx_int_80, __pyx_int_81, __pyx_int_82, __pyx_int_84, __pyx_int_85, __pyx_int_86, __pyx_int_87, __pyx_int_88, __pyx_int_90, __pyx_int_90, __pyx_int_91, __pyx_int_92, __pyx_int_93, __pyx_int_94, __pyx_int_95, __pyx_int_96, __pyx_int_100, __pyx_int_101, __pyx_int_103, __pyx_int_105, __pyx_int_106, __pyx_int_108, __pyx_int_110, __pyx_int_112, __pyx_int_118, __pyx_int_120); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "rodasdemuda.pyx":244
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "rodasdemuda.pyx":248
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__9 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__9);
  __Pyx_GIVEREF(__pyx_slice__9);

  /* "rodasdemuda.pyx":257
 * 		self._name 			= 'pfauter251'
 * 		self._modelo 		= 'P251'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  __pyx_tuple__10 = PyTuple_Pack(98, __pyx_int_20, __pyx_int_21, __pyx_int_22, __pyx_int_23, __pyx_int_24, __pyx_int_24, __pyx_int_25, __pyx_int_25, __pyx_int_26, __pyx_int_27, __pyx_int_27, __pyx_int_28, __pyx_int_29, __pyx_int_29, __pyx_int_30, __pyx_int_31, __pyx_int_32, __pyx_int_32, __pyx_int_33, __pyx_int_34, __pyx_int_35, __pyx_int_36, __pyx_int_36, __pyx_int_37, __pyx_int_38, __pyx_int_38, __pyx_int_39, __pyx_int_40, __pyx_int_40, __pyx_int_41, __pyx_int_42, __pyx_int_42, __pyx_int_43, __pyx_int_44, __pyx_int_45, __pyx_int_45, __pyx_int_46, __pyx_int_47, __pyx_int_48, __pyx_int_48, __pyx_int_49, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_58, __pyx_int_59, __pyx_int_60, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_63, __pyx_int_64, __pyx_int_64, __pyx_int_65, __pyx_int_66, __pyx_int_67, __pyx_int_68, __pyx_int_69, __pyx_int_70, __pyx_int_71, __pyx_int_71, __pyx_int_72, __pyx_int_72, __pyx_int_73, __pyx_int_74, __pyx_int_75, __pyx_int_76, __pyx_int_77, __pyx_int_78, __pyx_int_79, __pyx_int_80, __pyx_int_81, __pyx_int_82, __pyx_int_83, __pyx_int_84, __pyx_int_86, __pyx_int_87, __pyx_int_88, __pyx_int_89, __pyx_int_92, __pyx_int_94, __pyx_int_95, __pyx_int_96, __pyx_int_97, __pyx_int_98, __pyx_int_101, __pyx_int_102, __pyx_int_103, __pyx_int_107, __pyx_int_109, __pyx_int_113, __pyx_int_127); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "rodasdemuda.pyx":324
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "rodasdemuda.pyx":328
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__12 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__12)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__12);
  __Pyx_GIVEREF(__pyx_slice__12);

  /* "rodasdemuda.pyx":337
 * 		self._name 			= 'pfauter630'
 * 		self._modelo 		= 'P630'
 * 		self._conj_rodas 	= (20,21,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,36,37,38,38,39,40,40,41,42,42,43,44,45,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,94,95,96,97,98,101,102,103,107,109,113,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  __pyx_tuple__13 = PyTuple_Pack(98, __pyx_int_20, __pyx_int_21, __pyx_int_22, __pyx_int_23, __pyx_int_24, __pyx_int_24, __pyx_int_25, __pyx_int_25, __pyx_int_26, __pyx_int_27, __pyx_int_27, __pyx_int_28, __pyx_int_29, __pyx_int_29, __pyx_int_30, __pyx_int_31, __pyx_int_32, __pyx_int_32, __pyx_int_33, __pyx_int_34, __pyx_int_35, __pyx_int_36, __pyx_int_36, __pyx_int_37, __pyx_int_38, __pyx_int_38, __pyx_int_39, __pyx_int_40, __pyx_int_40, __pyx_int_41, __pyx_int_42, __pyx_int_42, __pyx_int_43, __pyx_int_44, __pyx_int_45, __pyx_int_45, __pyx_int_46, __pyx_int_47, __pyx_int_48, __pyx_int_48, __pyx_int_49, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_58, __pyx_int_59, __pyx_int_60, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_63, __pyx_int_64, __pyx_int_64, __pyx_int_65, __pyx_int_66, __pyx_int_67, __pyx_int_68, __pyx_int_69, __pyx_int_70, __pyx_int_71, __pyx_int_71, __pyx_int_72, __pyx_int_72, __pyx_int_73, __pyx_int_74, __pyx_int_75, __pyx_int_76, __pyx_int_77, __pyx_int_78, __pyx_int_79, __pyx_int_80, __pyx_int_81, __pyx_int_82, __pyx_int_83, __pyx_int_84, __pyx_int_86, __pyx_int_87, __pyx_int_88, __pyx_int_89, __pyx_int_92, __pyx_int_94, __pyx_int_95, __pyx_int_96, __pyx_int_97, __pyx_int_98, __pyx_int_101, __pyx_int_102, __pyx_int_103, __pyx_int_107, __pyx_int_109, __pyx_int_113, __pyx_int_127); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "rodasdemuda.pyx":405
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "rodasdemuda.pyx":409
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__15 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__15)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__15);
  __Pyx_GIVEREF(__pyx_slice__15);

  /* "rodasdemuda.pyx":418
 * 		self._name 			= 'pfauter2300'
 * 		self._modelo 		= 'P2300'
 * 		self._conj_rodas 	= (20,21,22,23,24,25,26,26,27,28,29,             # <<<<<<<<<<<<<<
 * 									30,31,32,33,34,35,36,37,38,39,
 * 									40,41,42,43,44,45,46,47,48,49,
 */
  __pyx_tuple__16 = PyTuple_Pack(70, __pyx_int_20, __pyx_int_21, __pyx_int_22, __pyx_int_23, __pyx_int_24, __pyx_int_25, __pyx_int_26, __pyx_int_26, __pyx_int_27, __pyx_int_28, __pyx_int_29, __pyx_int_30, __pyx_int_31, __pyx_int_32, __pyx_int_33, __pyx_int_34, __pyx_int_35, __pyx_int_36, __pyx_int_37, __pyx_int_38, __pyx_int_39, __pyx_int_40, __pyx_int_41, __pyx_int_42, __pyx_int_43, __pyx_int_44, __pyx_int_45, __pyx_int_46, __pyx_int_47, __pyx_int_48, __pyx_int_49, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_59, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_63, __pyx_int_64, __pyx_int_65, __pyx_int_66, __pyx_int_67, __pyx_int_68, __pyx_int_69, __pyx_int_70, __pyx_int_71, __pyx_int_72, __pyx_int_73, __pyx_int_74, __pyx_int_75, __pyx_int_76, __pyx_int_77, __pyx_int_78, __pyx_int_79, __pyx_int_80, __pyx_int_80, __pyx_int_82, __pyx_int_84, __pyx_int_85, __pyx_int_85, __pyx_int_90, __pyx_int_90); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "rodasdemuda.pyx":494
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "rodasdemuda.pyx":498
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__18 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__18)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__18);
  __Pyx_GIVEREF(__pyx_slice__18);

  /* "rodasdemuda.pyx":507
 * 		self._name 			= 'Modul'
 * 		self._modelo 		= '250x5'
 * 		self._conj_rodas 	= (20,21,22,22,23,24,25,26,26,27,28,29,29,29,30,30,31,32,33,34,35,36,36,37,38,39,40,40,41,42,43,44,45,45,46,47,47,48,48,49,50,50,51,52,53,54,55,56,57,58,59,60,60,61,62,62,63,64,65,66,67,67,68,69,70,70,71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,94,95,96,97,98,100,101,103,105,109,110,120)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._beta 			= kwargs.get('beta', 0)
 */
  __pyx_tuple__19 = PyTuple_Pack(101, __pyx_int_20, __pyx_int_21, __pyx_int_22, __pyx_int_22, __pyx_int_23, __pyx_int_24, __pyx_int_25, __pyx_int_26, __pyx_int_26, __pyx_int_27, __pyx_int_28, __pyx_int_29, __pyx_int_29, __pyx_int_29, __pyx_int_30, __pyx_int_30, __pyx_int_31, __pyx_int_32, __pyx_int_33, __pyx_int_34, __pyx_int_35, __pyx_int_36, __pyx_int_36, __pyx_int_37, __pyx_int_38, __pyx_int_39, __pyx_int_40, __pyx_int_40, __pyx_int_41, __pyx_int_42, __pyx_int_43, __pyx_int_44, __pyx_int_45, __pyx_int_45, __pyx_int_46, __pyx_int_47, __pyx_int_47, __pyx_int_48, __pyx_int_48, __pyx_int_49, __pyx_int_50, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_59, __pyx_int_60, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_62, __pyx_int_63, __pyx_int_64, __pyx_int_65, __pyx_int_66, __pyx_int_67, __pyx_int_67, __pyx_int_68, __pyx_int_69, __pyx_int_70, __pyx_int_70, __pyx_int_71, __pyx_int_71, __pyx_int_72, __pyx_int_72, __pyx_int_73, __pyx_int_74, __pyx_int_75, __pyx_int_76, __pyx_int_77, __pyx_int_78, __pyx_int_79, __pyx_int_80, __pyx_int_81, __pyx_int_82, __pyx_int_83, __pyx_int_84, __pyx_int_85, __pyx_int_86, __pyx_int_87, __pyx_int_89, __pyx_int_90, __pyx_int_91, __pyx_int_92, __pyx_int_94, __pyx_int_95, __pyx_int_96, __pyx_int_97, __pyx_int_98, __pyx_int_100, __pyx_int_101, __pyx_int_103, __pyx_int_105, __pyx_int_109, __pyx_int_110, __pyx_int_120); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "rodasdemuda.pyx":578
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "rodasdemuda.pyx":582
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__21 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__21)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__21);
  __Pyx_GIVEREF(__pyx_slice__21);

  /* "rodasdemuda.pyx":591
 * 		self._name 			= 'Lindner'
 * 		self._modelo 		= 'LINDNER'
 * 		self._conj_rodas	= (24,27,30,30,32,33,34,36,39,40,42,45,45,47,48,48,51,52,54,58,60,60,60,63,65,65,66,68,70,70,70,72,75,75,76,80,86,90,90,91,94,95,96,100,104,110,120,120,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 */
  __pyx_tuple__22 = PyTuple_Pack(49, __pyx_int_24, __pyx_int_27, __pyx_int_30, __pyx_int_30, __pyx_int_32, __pyx_int_33, __pyx_int_34, __pyx_int_36, __pyx_int_39, __pyx_int_40, __pyx_int_42, __pyx_int_45, __pyx_int_45, __pyx_int_47, __pyx_int_48, __pyx_int_48, __pyx_int_51, __pyx_int_52, __pyx_int_54, __pyx_int_58, __pyx_int_60, __pyx_int_60, __pyx_int_60, __pyx_int_63, __pyx_int_65, __pyx_int_65, __pyx_int_66, __pyx_int_68, __pyx_int_70, __pyx_int_70, __pyx_int_70, __pyx_int_72, __pyx_int_75, __pyx_int_75, __pyx_int_76, __pyx_int_80, __pyx_int_86, __pyx_int_90, __pyx_int_90, __pyx_int_91, __pyx_int_94, __pyx_int_95, __pyx_int_96, __pyx_int_100, __pyx_int_104, __pyx_int_110, __pyx_int_120, __pyx_int_120, __pyx_int_127); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "rodasdemuda.pyx":651
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "rodasdemuda.pyx":655
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__24 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__24)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__24);
  __Pyx_GIVEREF(__pyx_slice__24);

  /* "rodasdemuda.pyx":664
 * 		self._name 			= 'Heckert'
 * 		self._modelo 		= 'Heckert ZFWG 250'
 * 		self._conj_rodas	= (20,20,21,22,24,25,27,30,34,35,36,38,40,44,45,46,46,47,48,50,51,52,54,55,56,58,60,62,65,68,70,75,80,85,90,95,100,120,127)             # <<<<<<<<<<<<<<
 * 		self._m 			= kwargs.get('modulo', None)
 * 		self._zO			= kwargs.get('entradas', None)
 */
  __pyx_tuple__25 = PyTuple_Pack(39, __pyx_int_20, __pyx_int_20, __pyx_int_21, __pyx_int_22, __pyx_int_24, __pyx_int_25, __pyx_int_27, __pyx_int_30, __pyx_int_34, __pyx_int_35, __pyx_int_36, __pyx_int_38, __pyx_int_40, __pyx_int_44, __pyx_int_45, __pyx_int_46, __pyx_int_46, __pyx_int_47, __pyx_int_48, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_54, __pyx_int_55, __pyx_int_56, __pyx_int_58, __pyx_int_60, __pyx_int_62, __pyx_int_65, __pyx_int_68, __pyx_int_70, __pyx_int_75, __pyx_int_80, __pyx_int_85, __pyx_int_90, __pyx_int_95, __pyx_int_100, __pyx_int_120, __pyx_int_127); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "rodasdemuda.pyx":723
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "rodasdemuda.pyx":727
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__27 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__27)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__27);
  __Pyx_GIVEREF(__pyx_slice__27);

  /* "rodasdemuda.pyx":736
 * 		self._name 			= 'Spiromatic'
 * 		self._modelo 		= 'Spiromatic'
 * 		self._conj_rodas 	= (31,37,40,41,44,45,47,48,49,50,51,52,53,54,56,57,58,60,61,62,64,66,68,69,72,73,76,78,79,80,80,81,83,89)             # <<<<<<<<<<<<<<
 * 		self._w 			= kwargs.get('w', None)
 * 		self._razao 		= self._w
 */
  __pyx_tuple__28 = PyTuple_Pack(34, __pyx_int_31, __pyx_int_37, __pyx_int_40, __pyx_int_41, __pyx_int_44, __pyx_int_45, __pyx_int_47, __pyx_int_48, __pyx_int_49, __pyx_int_50, __pyx_int_51, __pyx_int_52, __pyx_int_53, __pyx_int_54, __pyx_int_56, __pyx_int_57, __pyx_int_58, __pyx_int_60, __pyx_int_61, __pyx_int_62, __pyx_int_64, __pyx_int_66, __pyx_int_68, __pyx_int_69, __pyx_int_72, __pyx_int_73, __pyx_int_76, __pyx_int_78, __pyx_int_79, __pyx_int_80, __pyx_int_80, __pyx_int_81, __pyx_int_83, __pyx_int_89); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "rodasdemuda.pyx":796
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "rodasdemuda.pyx":800
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__30 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__30)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__30);
  __Pyx_GIVEREF(__pyx_slice__30);

  /* "rodasdemuda.pyx":840
 * 
 * 		#ordena os resultados pelo erro, ascendente
 * 		result = sorted(result, key=itemgetter('erro'))             # <<<<<<<<<<<<<<
 * 
 * 		#limita o numero de resultados a 12
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_n_s_erro); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "rodasdemuda.pyx":844
 * 		#limita o numero de resultados a 12
 * 		if len(result) > 12:
 * 			result = result[0:12]             # <<<<<<<<<<<<<<
 * 
 * 		return result
 */
  __pyx_slice__32 = PySlice_New(__pyx_int_0, __pyx_int_12, Py_None); if (unlikely(!__pyx_slice__32)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__32);
  __Pyx_GIVEREF(__pyx_slice__32);

  /* "rodasdemuda.pyx":14
 * # modulo, beta
 * class Rollete (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'rollete'
 * 		self._modelo 		= 'Runderland 5A-4C'
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 14, __pyx_L1_error)

  /* "rodasdemuda.pyx":23
 * 		self._razao 		= self._m/4.5*cos(self._beta) 	#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__35 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_CD, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_CD); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 23, __pyx_L1_error)

  /* "rodasdemuda.pyx":42
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__37 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 42, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 42, __pyx_L1_error)

  /* "rodasdemuda.pyx":84
 * # modulo, beta, sentido
 * class Reishauer (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer'
 * 		self._modelo 		= 'reishauer'
 */
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 84, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 84, __pyx_L1_error)

  /* "rodasdemuda.pyx":94
 * 		self._razao 		= 11.6909*sin(self._beta)/self._m			#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__41 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_A, __pyx_n_s_MAX_B, __pyx_n_s_MAX_C, __pyx_n_s_MAX_D, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_T, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_T_AB, __pyx_n_s_MIN_CD, __pyx_n_s_MIN_T_CD, __pyx_n_s_MAX, __pyx_n_s_MIN, __pyx_n_s_MIN_T); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 19, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 94, __pyx_L1_error)

  /* "rodasdemuda.pyx":137
 * 
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__43 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 137, __pyx_L1_error)

  /* "rodasdemuda.pyx":179
 * # Modulo
 * class ReishauerDressage (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer_dressage'
 * 		self._modelo 		= 'reishauer'
 */
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 179, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 179, __pyx_L1_error)

  /* "rodasdemuda.pyx":186
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__47 = PyTuple_Pack(17, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_A, __pyx_n_s_MAX_B, __pyx_n_s_MAX_C, __pyx_n_s_MAX_D, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_CD, __pyx_n_s_MAX_T, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_T_AB, __pyx_n_s_MIN_CD, __pyx_n_s_MIN_T_CD); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 17, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 186, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 186, __pyx_L1_error)

  /* "rodasdemuda.pyx":212
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__49 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 212, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 212, __pyx_L1_error)

  /* "rodasdemuda.pyx":254
 * # modulo, entradas, modo ou beta
 * class Pfauter251 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter251'
 * 		self._modelo 		= 'P251'
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 254, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 254, __pyx_L1_error)

  /* "rodasdemuda.pyx":272
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__53 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_CD, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_CD, __pyx_n_s_MAX_D); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 272, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 272, __pyx_L1_error)

  /* "rodasdemuda.pyx":292
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__55 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 292, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 292, __pyx_L1_error)

  /* "rodasdemuda.pyx":334
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter630'
 * 		self._modelo 		= 'P630'
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 334, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 334, __pyx_L1_error)

  /* "rodasdemuda.pyx":352
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__59 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_CD, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_CD, __pyx_n_s_MAX_D); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 352, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 352, __pyx_L1_error)

  /* "rodasdemuda.pyx":373
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__61 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 373, __pyx_L1_error)

  /* "rodasdemuda.pyx":415
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter2300'
 * 		self._modelo 		= 'P2300'
 */
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 415, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 415, __pyx_L1_error)

  /* "rodasdemuda.pyx":439
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__65 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_A, __pyx_n_s_MAX_D, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_CD, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_CD); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 439, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 439, __pyx_L1_error)

  /* "rodasdemuda.pyx":462
 * 				return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__67 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 462, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 462, __pyx_L1_error)

  /* "rodasdemuda.pyx":504
 * # modulo, entradas, modo ou beta
 * class Modul (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Modul'
 * 		self._modelo 		= '250x5'
 */
  __pyx_tuple__69 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 504, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 504, __pyx_L1_error)

  /* "rodasdemuda.pyx":522
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__71 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_AB, __pyx_n_s_MIN_AB, __pyx_n_s_MAX_CD, __pyx_n_s_MIN_CD, __pyx_n_s_MAX_A, __pyx_n_s_MAX_D); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 522, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 522, __pyx_L1_error)

  /* "rodasdemuda.pyx":546
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__73 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 546, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 546, __pyx_L1_error)

  /* "rodasdemuda.pyx":588
 * # Modulo e entradas
 * class Lindner (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Lindner'
 * 		self._modelo 		= 'LINDNER'
 */
  __pyx_tuple__75 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 588, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "rodasdemuda.pyx":599
 * 			self._razao = (6*pi)/(25.4*12)*self._m*self._zO
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__77 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MAX_A, __pyx_n_s_MAX_B, __pyx_n_s_MAX_D, __pyx_n_s_MAX_AB, __pyx_n_s_MIN_CD); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 599, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "rodasdemuda.pyx":619
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__79 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 619, __pyx_L1_error)

  /* "rodasdemuda.pyx":661
 * # Modulo e entradas
 * class Heckert (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Heckert'
 * 		self._modelo 		= 'Heckert ZFWG 250'
 */
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 661, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 661, __pyx_L1_error)

  /* "rodasdemuda.pyx":672
 * 			self._razao = (self._m*self._zO*47)/(40*95)
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_tuple__83 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_CD, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_CD); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 672, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 672, __pyx_L1_error)

  /* "rodasdemuda.pyx":691
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__85 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 691, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 691, __pyx_L1_error)

  /* "rodasdemuda.pyx":733
 * # modulo, entradas, modo ou beta
 * class Spiromatic (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Spiromatic'
 * 		self._modelo 		= 'Spiromatic'
 */
  __pyx_tuple__87 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_init, 733, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 733, __pyx_L1_error)

  /* "rodasdemuda.pyx":741
 * 
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 6:
 * 			return None
 */
  __pyx_tuple__89 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_conjunto, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_D, __pyx_n_s_E, __pyx_n_s_F, __pyx_n_s_MAX_A, __pyx_n_s_MAX_F, __pyx_n_s_MIN_AB, __pyx_n_s_MIN_EF, __pyx_n_s_MAX_AB, __pyx_n_s_MAX_EF); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(1, 0, 14, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_limites, 741, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 741, __pyx_L1_error)

  /* "rodasdemuda.pyx":764
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__91 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_e, __pyx_n_s_f, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda, 764, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 764, __pyx_L1_error)

  /* "rodasdemuda.pyx":804
 * 		return result
 * 
 * 	def rodasdemuda6(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_tuple__93 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_erro, __pyx_n_s_razaom, __pyx_n_s_err, __pyx_n_s_lrodas, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_c, __pyx_n_s_d, __pyx_n_s_e, __pyx_n_s_f, __pyx_n_s_rodas, __pyx_n_s_result, __pyx_n_s_keyfunc, __pyx_n_s_giter, __pyx_n_s_g); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 16, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_Daniel_Dropbox_projectos, __pyx_n_s_rodasdemuda6, 804, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_4_5 = PyFloat_FromDouble(4.5); if (unlikely(!__pyx_float_4_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_25_4 = PyFloat_FromDouble(25.4); if (unlikely(!__pyx_float_25_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_21 = PyInt_FromLong(21); if (unlikely(!__pyx_int_21)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_22 = PyInt_FromLong(22); if (unlikely(!__pyx_int_22)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_23 = PyInt_FromLong(23); if (unlikely(!__pyx_int_23)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_24 = PyInt_FromLong(24); if (unlikely(!__pyx_int_24)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_25 = PyInt_FromLong(25); if (unlikely(!__pyx_int_25)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_26 = PyInt_FromLong(26); if (unlikely(!__pyx_int_26)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_27 = PyInt_FromLong(27); if (unlikely(!__pyx_int_27)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_28 = PyInt_FromLong(28); if (unlikely(!__pyx_int_28)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_29 = PyInt_FromLong(29); if (unlikely(!__pyx_int_29)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_31 = PyInt_FromLong(31); if (unlikely(!__pyx_int_31)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_34 = PyInt_FromLong(34); if (unlikely(!__pyx_int_34)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_36 = PyInt_FromLong(36); if (unlikely(!__pyx_int_36)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_37 = PyInt_FromLong(37); if (unlikely(!__pyx_int_37)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_38 = PyInt_FromLong(38); if (unlikely(!__pyx_int_38)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_39 = PyInt_FromLong(39); if (unlikely(!__pyx_int_39)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_40 = PyInt_FromLong(40); if (unlikely(!__pyx_int_40)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_41 = PyInt_FromLong(41); if (unlikely(!__pyx_int_41)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_42 = PyInt_FromLong(42); if (unlikely(!__pyx_int_42)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_43 = PyInt_FromLong(43); if (unlikely(!__pyx_int_43)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_44 = PyInt_FromLong(44); if (unlikely(!__pyx_int_44)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_45 = PyInt_FromLong(45); if (unlikely(!__pyx_int_45)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_46 = PyInt_FromLong(46); if (unlikely(!__pyx_int_46)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_47 = PyInt_FromLong(47); if (unlikely(!__pyx_int_47)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_48 = PyInt_FromLong(48); if (unlikely(!__pyx_int_48)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_49 = PyInt_FromLong(49); if (unlikely(!__pyx_int_49)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_51 = PyInt_FromLong(51); if (unlikely(!__pyx_int_51)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_52 = PyInt_FromLong(52); if (unlikely(!__pyx_int_52)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_54 = PyInt_FromLong(54); if (unlikely(!__pyx_int_54)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_55 = PyInt_FromLong(55); if (unlikely(!__pyx_int_55)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_56 = PyInt_FromLong(56); if (unlikely(!__pyx_int_56)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_57 = PyInt_FromLong(57); if (unlikely(!__pyx_int_57)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_58 = PyInt_FromLong(58); if (unlikely(!__pyx_int_58)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_59 = PyInt_FromLong(59); if (unlikely(!__pyx_int_59)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_60 = PyInt_FromLong(60); if (unlikely(!__pyx_int_60)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_61 = PyInt_FromLong(61); if (unlikely(!__pyx_int_61)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_62 = PyInt_FromLong(62); if (unlikely(!__pyx_int_62)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_63 = PyInt_FromLong(63); if (unlikely(!__pyx_int_63)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_65 = PyInt_FromLong(65); if (unlikely(!__pyx_int_65)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_66 = PyInt_FromLong(66); if (unlikely(!__pyx_int_66)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_67 = PyInt_FromLong(67); if (unlikely(!__pyx_int_67)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_68 = PyInt_FromLong(68); if (unlikely(!__pyx_int_68)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_69 = PyInt_FromLong(69); if (unlikely(!__pyx_int_69)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_70 = PyInt_FromLong(70); if (unlikely(!__pyx_int_70)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_71 = PyInt_FromLong(71); if (unlikely(!__pyx_int_71)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_72 = PyInt_FromLong(72); if (unlikely(!__pyx_int_72)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_73 = PyInt_FromLong(73); if (unlikely(!__pyx_int_73)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_74 = PyInt_FromLong(74); if (unlikely(!__pyx_int_74)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_75 = PyInt_FromLong(75); if (unlikely(!__pyx_int_75)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_76 = PyInt_FromLong(76); if (unlikely(!__pyx_int_76)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_77 = PyInt_FromLong(77); if (unlikely(!__pyx_int_77)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_78 = PyInt_FromLong(78); if (unlikely(!__pyx_int_78)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_79 = PyInt_FromLong(79); if (unlikely(!__pyx_int_79)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_81 = PyInt_FromLong(81); if (unlikely(!__pyx_int_81)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_82 = PyInt_FromLong(82); if (unlikely(!__pyx_int_82)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_83 = PyInt_FromLong(83); if (unlikely(!__pyx_int_83)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_84 = PyInt_FromLong(84); if (unlikely(!__pyx_int_84)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_85 = PyInt_FromLong(85); if (unlikely(!__pyx_int_85)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_86 = PyInt_FromLong(86); if (unlikely(!__pyx_int_86)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_87 = PyInt_FromLong(87); if (unlikely(!__pyx_int_87)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_88 = PyInt_FromLong(88); if (unlikely(!__pyx_int_88)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_89 = PyInt_FromLong(89); if (unlikely(!__pyx_int_89)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_90 = PyInt_FromLong(90); if (unlikely(!__pyx_int_90)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_91 = PyInt_FromLong(91); if (unlikely(!__pyx_int_91)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_92 = PyInt_FromLong(92); if (unlikely(!__pyx_int_92)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_93 = PyInt_FromLong(93); if (unlikely(!__pyx_int_93)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_94 = PyInt_FromLong(94); if (unlikely(!__pyx_int_94)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_95 = PyInt_FromLong(95); if (unlikely(!__pyx_int_95)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_96 = PyInt_FromLong(96); if (unlikely(!__pyx_int_96)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_97 = PyInt_FromLong(97); if (unlikely(!__pyx_int_97)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_98 = PyInt_FromLong(98); if (unlikely(!__pyx_int_98)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101 = PyInt_FromLong(101); if (unlikely(!__pyx_int_101)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_102 = PyInt_FromLong(102); if (unlikely(!__pyx_int_102)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_103 = PyInt_FromLong(103); if (unlikely(!__pyx_int_103)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_104 = PyInt_FromLong(104); if (unlikely(!__pyx_int_104)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_105 = PyInt_FromLong(105); if (unlikely(!__pyx_int_105)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_106 = PyInt_FromLong(106); if (unlikely(!__pyx_int_106)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_107 = PyInt_FromLong(107); if (unlikely(!__pyx_int_107)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_108 = PyInt_FromLong(108); if (unlikely(!__pyx_int_108)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_109 = PyInt_FromLong(109); if (unlikely(!__pyx_int_109)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_110 = PyInt_FromLong(110); if (unlikely(!__pyx_int_110)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112 = PyInt_FromLong(112); if (unlikely(!__pyx_int_112)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_113 = PyInt_FromLong(113); if (unlikely(!__pyx_int_113)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_118 = PyInt_FromLong(118); if (unlikely(!__pyx_int_118)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_120 = PyInt_FromLong(120); if (unlikely(!__pyx_int_120)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_127 = PyInt_FromLong(127); if (unlikely(!__pyx_int_127)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_180 = PyInt_FromLong(180); if (unlikely(!__pyx_int_180)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_570 = PyInt_FromLong(570); if (unlikely(!__pyx_int_570)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3800 = PyInt_FromLong(3800); if (unlikely(!__pyx_int_3800)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initrodasdemuda(void); /*proto*/
PyMODINIT_FUNC initrodasdemuda(void)
#else
PyMODINIT_FUNC PyInit_rodasdemuda(void); /*proto*/
PyMODINIT_FUNC PyInit_rodasdemuda(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_rodasdemuda(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("rodasdemuda", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_rodasdemuda) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "rodasdemuda")) {
      if (unlikely(PyDict_SetItemString(modules, "rodasdemuda", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "rodasdemuda.pyx":2
 * # -*- coding: utf-8 -*-
 * __author__	= 'Daniel Oliveira'             # <<<<<<<<<<<<<<
 * __contact__	= 'danielfilipe.mo@gmail.com'
 * __date__	= '31 March 2013'
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Daniel_Oliveira) < 0) __PYX_ERR(0, 2, __pyx_L1_error)

  /* "rodasdemuda.pyx":3
 * # -*- coding: utf-8 -*-
 * __author__	= 'Daniel Oliveira'
 * __contact__	= 'danielfilipe.mo@gmail.com'             # <<<<<<<<<<<<<<
 * __date__	= '31 March 2013'
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_contact, __pyx_kp_s_danielfilipe_mo_gmail_com) < 0) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "rodasdemuda.pyx":4
 * __author__	= 'Daniel Oliveira'
 * __contact__	= 'danielfilipe.mo@gmail.com'
 * __date__	= '31 March 2013'             # <<<<<<<<<<<<<<
 * 
 * from libcpp.vector cimport vector
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_date, __pyx_kp_s_31_March_2013) < 0) __PYX_ERR(0, 4, __pyx_L1_error)

  /* "rodasdemuda.pyx":8
 * from libcpp.vector cimport vector
 * from libc.math cimport fabs, sin, cos
 * from math import pi, degrees, radians             # <<<<<<<<<<<<<<
 * from operator import itemgetter
 * from itertools import groupby
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_pi);
  __Pyx_GIVEREF(__pyx_n_s_pi);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_pi);
  __Pyx_INCREF(__pyx_n_s_degrees);
  __Pyx_GIVEREF(__pyx_n_s_degrees);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_degrees);
  __Pyx_INCREF(__pyx_n_s_radians);
  __Pyx_GIVEREF(__pyx_n_s_radians);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_radians);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pi, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_degrees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_degrees, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_radians); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_radians, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rodasdemuda.pyx":9
 * from libc.math cimport fabs, sin, cos
 * from math import pi, degrees, radians
 * from operator import itemgetter             # <<<<<<<<<<<<<<
 * from itertools import groupby
 * from .common import six2dec
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_itemgetter);
  __Pyx_GIVEREF(__pyx_n_s_itemgetter);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_itemgetter);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_operator, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_itemgetter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itemgetter, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":10
 * from math import pi, degrees, radians
 * from operator import itemgetter
 * from itertools import groupby             # <<<<<<<<<<<<<<
 * from .common import six2dec
 * # modulo, beta
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_groupby);
  __Pyx_GIVEREF(__pyx_n_s_groupby);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_groupby);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_groupby); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_groupby, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rodasdemuda.pyx":11
 * from operator import itemgetter
 * from itertools import groupby
 * from .common import six2dec             # <<<<<<<<<<<<<<
 * # modulo, beta
 * class Rollete (object):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_six2dec);
  __Pyx_GIVEREF(__pyx_n_s_six2dec);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_six2dec);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_common, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_six2dec); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_six2dec, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":13
 * from .common import six2dec
 * # modulo, beta
 * class Rollete (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'rollete'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Rollete, __pyx_n_s_Rollete, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":14
 * # modulo, beta
 * class Rollete (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'rollete'
 * 		self._modelo 		= 'Runderland 5A-4C'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Rollete_1__init__, 0, __pyx_n_s_Rollete___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":23
 * 		self._razao 		= self._m/4.5*cos(self._beta) 	#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Rollete_3limites, 0, __pyx_n_s_Rollete_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":42
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Rollete_5rodasdemuda, 0, __pyx_n_s_Rollete_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":13
 * from .common import six2dec
 * # modulo, beta
 * class Rollete (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'rollete'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Rollete, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Rollete, __pyx_t_4) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":83
 * 
 * # modulo, beta, sentido
 * class Reishauer (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Reishauer, __pyx_n_s_Reishauer, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":84
 * # modulo, beta, sentido
 * class Reishauer (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer'
 * 		self._modelo 		= 'reishauer'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_9Reishauer_1__init__, 0, __pyx_n_s_Reishauer___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":94
 * 		self._razao 		= 11.6909*sin(self._beta)/self._m			#modulo e beta
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_9Reishauer_3limites, 0, __pyx_n_s_Reishauer_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":137
 * 
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_9Reishauer_5rodasdemuda, 0, __pyx_n_s_Reishauer_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":83
 * 
 * # modulo, beta, sentido
 * class Reishauer (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Reishauer, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Reishauer, __pyx_t_4) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":178
 * 
 * # Modulo
 * class ReishauerDressage (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer_dressage'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ReishauerDressage, __pyx_n_s_ReishauerDressage, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":179
 * # Modulo
 * class ReishauerDressage (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'reishauer_dressage'
 * 		self._modelo 		= 'reishauer'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_17ReishauerDressage_1__init__, 0, __pyx_n_s_ReishauerDressage___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":186
 * 		self._razao 		= self._razao = 6/25.4*self._m								#modulo
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_17ReishauerDressage_3limites, 0, __pyx_n_s_ReishauerDressage_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":212
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_17ReishauerDressage_5rodasdemuda, 0, __pyx_n_s_ReishauerDressage_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":178
 * 
 * # Modulo
 * class ReishauerDressage (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'reishauer_dressage'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ReishauerDressage, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ReishauerDressage, __pyx_t_4) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":253
 * 
 * # modulo, entradas, modo ou beta
 * class Pfauter251 (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter251'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Pfauter251, __pyx_n_s_Pfauter251, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":254
 * # modulo, entradas, modo ou beta
 * class Pfauter251 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter251'
 * 		self._modelo 		= 'P251'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter251_1__init__, 0, __pyx_n_s_Pfauter251___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":272
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter251_3limites, 0, __pyx_n_s_Pfauter251_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":292
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter251_5rodasdemuda, 0, __pyx_n_s_Pfauter251_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":253
 * 
 * # modulo, entradas, modo ou beta
 * class Pfauter251 (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter251'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Pfauter251, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pfauter251, __pyx_t_4) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":333
 * 
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter630'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Pfauter630, __pyx_n_s_Pfauter630, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":334
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter630'
 * 		self._modelo 		= 'P630'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_1__init__, 0, __pyx_n_s_Pfauter630___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":352
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_3limites, 0, __pyx_n_s_Pfauter630_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":373
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_5rodasdemuda, 0, __pyx_n_s_Pfauter630_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":333
 * 
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter630'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Pfauter630, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pfauter630, __pyx_t_4) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":414
 * 
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter2300'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Pfauter630, __pyx_n_s_Pfauter630, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":415
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'pfauter2300'
 * 		self._modelo 		= 'P2300'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_7__init__, 0, __pyx_n_s_Pfauter630___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":439
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_9limites, 0, __pyx_n_s_Pfauter630_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":462
 * 				return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Pfauter630_11rodasdemuda, 0, __pyx_n_s_Pfauter630_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":414
 * 
 * # modulo, entradas, modo ou beta
 * class Pfauter630 (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'pfauter2300'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Pfauter630, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pfauter630, __pyx_t_4) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":503
 * 
 * # modulo, entradas, modo ou beta
 * class Modul (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Modul'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Modul, __pyx_n_s_Modul, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":504
 * # modulo, entradas, modo ou beta
 * class Modul (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Modul'
 * 		self._modelo 		= '250x5'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_5Modul_1__init__, 0, __pyx_n_s_Modul___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":522
 * 			self._razao = None
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_5Modul_3limites, 0, __pyx_n_s_Modul_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":546
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_5Modul_5rodasdemuda, 0, __pyx_n_s_Modul_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":503
 * 
 * # modulo, entradas, modo ou beta
 * class Modul (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Modul'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Modul, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Modul, __pyx_t_4) < 0) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":587
 * 
 * # Modulo e entradas
 * class Lindner (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Lindner'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Lindner, __pyx_n_s_Lindner, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":588
 * # Modulo e entradas
 * class Lindner (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Lindner'
 * 		self._modelo 		= 'LINDNER'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Lindner_1__init__, 0, __pyx_n_s_Lindner___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":599
 * 			self._razao = (6*pi)/(25.4*12)*self._m*self._zO
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Lindner_3limites, 0, __pyx_n_s_Lindner_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":619
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Lindner_5rodasdemuda, 0, __pyx_n_s_Lindner_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":587
 * 
 * # Modulo e entradas
 * class Lindner (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Lindner'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Lindner, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Lindner, __pyx_t_4) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":660
 * 
 * # Modulo e entradas
 * class Heckert (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Heckert'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Heckert, __pyx_n_s_Heckert, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":661
 * # Modulo e entradas
 * class Heckert (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Heckert'
 * 		self._modelo 		= 'Heckert ZFWG 250'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Heckert_1__init__, 0, __pyx_n_s_Heckert___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":672
 * 			self._razao = (self._m*self._zO*47)/(40*95)
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 4:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Heckert_3limites, 0, __pyx_n_s_Heckert_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":691
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_7Heckert_5rodasdemuda, 0, __pyx_n_s_Heckert_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":660
 * 
 * # Modulo e entradas
 * class Heckert (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Heckert'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Heckert, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Heckert, __pyx_t_4) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":732
 * 
 * # modulo, entradas, modo ou beta
 * class Spiromatic (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Spiromatic'
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Spiromatic, __pyx_n_s_Spiromatic, (PyObject *) NULL, __pyx_n_s_rodasdemuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rodasdemuda.pyx":733
 * # modulo, entradas, modo ou beta
 * class Spiromatic (object):
 * 	def __init__ (self, **kwargs) :             # <<<<<<<<<<<<<<
 * 		self._name 			= 'Spiromatic'
 * 		self._modelo 		= 'Spiromatic'
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Spiromatic_1__init__, 0, __pyx_n_s_Spiromatic___init, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":741
 * 
 * 
 * 	def limites(self, *conjunto):             # <<<<<<<<<<<<<<
 * 		if len(conjunto) != 6:
 * 			return None
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Spiromatic_3limites, 0, __pyx_n_s_Spiromatic_limites, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_limites, __pyx_t_4) < 0) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":764
 * 			return False
 * 
 * 	def rodasdemuda(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Spiromatic_5rodasdemuda, 0, __pyx_n_s_Spiromatic_rodasdemuda, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda, __pyx_t_4) < 0) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":804
 * 		return result
 * 
 * 	def rodasdemuda6(self, float erro = 0.001):             # <<<<<<<<<<<<<<
 * 		cdef float razaom, err
 * 		razaom = 0
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.001)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11rodasdemuda_10Spiromatic_7rodasdemuda6, 0, __pyx_n_s_Spiromatic_rodasdemuda6, NULL, __pyx_n_s_rodasdemuda, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rodasdemuda6, __pyx_t_4) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rodasdemuda.pyx":732
 * 
 * # modulo, entradas, modo ou beta
 * class Spiromatic (object):             # <<<<<<<<<<<<<<
 * 	def __init__ (self, **kwargs) :
 * 		self._name 			= 'Spiromatic'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Spiromatic, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Spiromatic, __pyx_t_4) < 0) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rodasdemuda.pyx":1
 * # -*- coding: utf-8 -*-             # <<<<<<<<<<<<<<
 * __author__	= 'Daniel Oliveira'
 * __contact__	= 'danielfilipe.mo@gmail.com'
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init rodasdemuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rodasdemuda");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyFloatBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallMethod1 */
      static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
      static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* FetchCommonType */
      static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
      static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* IterNext */
          static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
#if CYTHON_USE_TYPE_SLOTS
    if (unlikely(!iternext)) {
#else
    if (unlikely(!iternext) || unlikely(!PyIter_Check(iterator))) {
#endif
        PyErr_Format(PyExc_TypeError,
            "%.200s object is not an iterator", Py_TYPE(iterator)->tp_name);
        return NULL;
    }
    next = iternext(iterator);
    if (likely(next))
        return next;
#if CYTHON_USE_TYPE_SLOTS
#if PY_VERSION_HEX >= 0x02070000
    if (unlikely(iternext == &_PyObject_NextNotImplemented))
        return NULL;
#endif
#endif
    if (defval) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
            if (unlikely(exc_type != PyExc_StopIteration) &&
                    !PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))
                return NULL;
            PyErr_Clear();
        }
        Py_INCREF(defval);
        return defval;
    }
    if (!PyErr_Occurred())
        PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}

/* SliceObject */
            static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyObjectCallNoArg */
            #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
              #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* BytesEquals */
              static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
              static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntBinop */
              #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* Import */
              static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
              static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
              static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
              static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
              static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
              static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
              static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
